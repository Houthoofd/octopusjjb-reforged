{"mappings":"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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-fb71ab9151b03875.js","server/src/index.ts","server/src/routes/index.ts","server/src/routes/connexion.ts","server/src/packages/db/client.ts","server/src/packages/db/mysqlconnector.ts","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","server/src/routes/cours.ts","server/src/routes/inscriptions.ts","server/src/routes/reservations.ts","server/src/routes/profile.ts","server/src/routes/compte.ts","server/src/routes/infos.ts","server/src/routes/new-password.ts","server/src/routes/users.ts"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = 8080;var HMR_SECURE = false;var HMR_ENV_HASH = \"7b4c78780e548846\";var HMR_USE_SSE = false;module.bundle.HMR_BUNDLE_ID = \"a33cbb4682fd622e\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: {|[string]: mixed|};\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var HMR_USE_SSE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData[moduleName],\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData[moduleName] = undefined;\n}\nmodule.bundle.Module = Module;\nmodule.bundle.hotData = {};\nvar checkedAssets /*: {|[string]: boolean|} */, assetsToDispose /*: Array<[ParcelRequire, string]> */, assetsToAccept /*: Array<[ParcelRequire, string]> */;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\nfunction getPort() {\n  return HMR_PORT || location.port;\n}\n\n// eslint-disable-next-line no-redeclare\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !['localhost', '127.0.0.1', '0.0.0.0'].includes(hostname) ? 'wss' : 'ws';\n  var ws;\n  if (HMR_USE_SSE) {\n    ws = new EventSource('/__parcel_hmr');\n  } else {\n    try {\n      ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');\n    } catch (err) {\n      if (err.message) {\n        console.error(err.message);\n      }\n      ws = {};\n    }\n  }\n\n  // Web extension context\n  var extCtx = typeof browser === 'undefined' ? typeof chrome === 'undefined' ? null : chrome : browser;\n\n  // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n  var supportsSourceURL = false;\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  }\n\n  // $FlowFixMe\n  ws.onmessage = async function (event /*: {data: string, ...} */) {\n    checkedAssets = {} /*: {|[string]: boolean|} */;\n    assetsToAccept = [];\n    assetsToDispose = [];\n    var data /*: HMRMessage */ = JSON.parse(event.data);\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH);\n\n      // Handle HMR Update\n      let handled = assets.every(asset => {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n      if (handled) {\n        console.clear();\n\n        // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n        if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n          window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n        }\n        await hmrApplyUpdates(assets);\n\n        // Dispose all old assets.\n        let processedAssets = {} /*: {|[string]: boolean|} */;\n        for (let i = 0; i < assetsToDispose.length; i++) {\n          let id = assetsToDispose[i][1];\n          if (!processedAssets[id]) {\n            hmrDispose(assetsToDispose[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n\n        // Run accept callbacks. This will also re-execute other disposed assets in topological order.\n        processedAssets = {};\n        for (let i = 0; i < assetsToAccept.length; i++) {\n          let id = assetsToAccept[i][1];\n          if (!processedAssets[id]) {\n            hmrAccept(assetsToAccept[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n      } else fullReload();\n    }\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      for (let ansiDiagnostic of data.diagnostics.ansi) {\n        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n        console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n      }\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html);\n        // $FlowFixMe\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n  if (ws instanceof WebSocket) {\n    ws.onerror = function (e) {\n      if (e.message) {\n        console.error(e.message);\n      }\n    };\n    ws.onclose = function () {\n      console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\nfunction fullReload() {\n  if ('reload' in location) {\n    location.reload();\n  } else if (extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  }\n}\nfunction getParents(bundle, id) /*: Array<[ParcelRequire, string]> */{\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n  var parents = [];\n  var k, d, dep;\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n  return parents;\n}\nfunction updateLink(link) {\n  var href = link.getAttribute('href');\n  if (!href) {\n    return;\n  }\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n  newLink.setAttribute('href',\n  // $FlowFixMe\n  href.split('?')[0] + '?' + Date.now());\n  // $FlowFixMe\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href /*: string */ = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n    cssTimeout = null;\n  }, 50);\n}\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n      return new Promise((resolve, reject) => {\n        var _document$head;\n        script.onload = () => resolve(script);\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension fix\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n            extCtx.runtime.reload();\n            return;\n          }\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n          (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\nfunction hmrApply(bundle /*: ParcelRequire */, asset /*:  HMRAsset */) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      }\n\n      // $FlowFixMe\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    }\n\n    // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n    delete modules[id];\n    delete bundle.cache[id];\n\n    // Now delete the orphans.\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\nfunction hmrAcceptCheck(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  }\n\n  // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n      parents.push(...p);\n    }\n  }\n  return accepted;\n}\nfunction hmrAcceptCheckOne(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n  if (checkedAssets[id]) {\n    return true;\n  }\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToDispose.push([bundle, id]);\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    assetsToAccept.push([bundle, id]);\n    return true;\n  }\n}\nfunction hmrDispose(bundle /*: ParcelRequire */, id /*: string */) {\n  var cached = bundle.cache[id];\n  bundle.hotData[id] = {};\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData[id];\n  }\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData[id]);\n    });\n  }\n  delete bundle.cache[id];\n}\nfunction hmrAccept(bundle /*: ParcelRequire */, id /*: string */) {\n  // Execute the module.\n  bundle(id);\n\n  // Run the accept callbacks in the new version of the module.\n  var cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        assetsToAlsoAccept.forEach(function (a) {\n          hmrDispose(a[0], a[1]);\n        });\n\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n}","import express from 'express';\r\nimport cookieParser from 'cookie-parser';\r\nimport logger from 'morgan';\r\nimport cors from 'cors';\r\nimport path from 'path';\r\n\r\nimport { default as indexRouter } from './routes';\r\n\r\nconst __server_dirname = process.cwd ? process.cwd() : process.env.PWD as string;\r\n\r\nconst app = express();\r\n\r\napp.use(cors({\r\n  origin: 'http://ec2-18-185-136-232.eu-central-1.compute.amazonaws.com/'\r\n}));\r\n\r\napp.use(logger('dev'));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\napp.use( express.static(path.join(__server_dirname, '/server/public')) );\r\n\r\n\r\napp.use('/', indexRouter);\r\n\r\napp.listen(3000)","import path from 'path';\r\nimport express from 'express';\r\n\r\nconst router = express.Router();\r\n\r\nimport { default as connexionRouter } from './connexion';\r\nimport { default as coursRouter } from './cours';\r\nimport { default as inscriptionsCoursRouter } from './inscriptions';\r\nimport { default as inscriptionsCoursEssaiesRouter } from './reservations';\r\nimport { default as profileRouter } from './profile';\r\nimport { default as compteRouter } from './compte';\r\nimport { default as infosRouter } from './infos';\r\nimport { default as newPasswordRouter } from './new-password';\r\nimport { default as usersRouter } from './users';\r\n\r\n// Routes principales\r\nrouter.use('/connexion', connexionRouter);\r\nrouter.use('/cours', coursRouter);\r\nrouter.use('/inscriptions', inscriptionsCoursRouter);\r\nrouter.use('/reservations', inscriptionsCoursEssaiesRouter);\r\nrouter.use('/password', newPasswordRouter);\r\nrouter.use('/profile', profileRouter);\r\nrouter.use('/compte', compteRouter);\r\nrouter.use('/informations', infosRouter);\r\nrouter.use('/users', usersRouter);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default router;\r\n","import express from 'express';\r\nimport dotenv from 'dotenv';\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt'; \r\nimport { Client as SQLClient } from '../packages/db/client';\r\n\r\n// Charger les variables d'environnement\r\ndotenv.config();\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post('/', async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  if (!email || !password) {\r\n    return res.status(400).send('Email et mot de passe sont requis');\r\n  }\r\n\r\n  const client = new SQLClient();\r\n\r\n  try {\r\n    const query = 'SELECT * FROM utilisateurs WHERE email = ?';\r\n    const values = [email];\r\n    const results = await client.query(query, values);\r\n\r\n    if (results.length === 0) {\r\n      return res.status(401).send('Utilisateur non trouvé');\r\n    }\r\n\r\n    const user = results[0];\r\n\r\n    const match = await bcrypt.compare(password, user.password);\r\n    console.log(user);\r\n    if (!match) {\r\n      return res.status(401).send('Mot de passe incorrect');\r\n    }\r\n\r\n    // Vérification de TOKEN_SECRET\r\n    const tokenSecret = process.env.TOKEN_SECRET;\r\n    if (!tokenSecret) {\r\n      console.error('Erreur : TOKEN_SECRET est undefined');\r\n      return res.status(500).send('Erreur de configuration serveur');\r\n    }\r\n\r\n    // Génération du token JWT\r\n    const token = jwt.sign(\r\n      { email: user.email, role: user.status },\r\n      tokenSecret,\r\n      { expiresIn: '1h' }\r\n    );\r\n    console.log('Cookie set:', 'token=' + token);\r\n\r\n    res.cookie('token', token, {\r\n      httpOnly: true,         // Le cookie ne peut être accédé que par le serveur, pas par JavaScript\r\n      secure: false,          // Ne pas forcer HTTPS si vous utilisez HTTP\r\n      sameSite: 'none',       // Permet l'envoi du cookie dans les requêtes inter-domaines\r\n      maxAge: 3600000,        // Durée de vie du cookie (1 heure)\r\n      domain: '.octopusjjb.ovh', // Assurez-vous que le domaine est bien configuré\r\n    });\r\n\r\n    // Envoi du token également dans la réponse JSON\r\n    res.status(200).json({\r\n      message: 'Connexion réussie',\r\n      userData: {\r\n        email: user.email,\r\n        role: user.status,\r\n        nom: user.last_name,\r\n        prenom: user.first_name,\r\n        isloged: true\r\n      },\r\n    });\r\n\r\n  } catch (err) {\r\n    console.error('Erreur lors de la vérification de l\\'utilisateur', err);\r\n    res.status(500).send('Erreur lors de la vérification de l\\'utilisateur');\r\n  }\r\n});\r\n\r\n\r\n\r\nexport default router;\r\n","import MysqlConnector from './mysqlconnector';\r\n\r\n\r\nexport class Client{\r\n\r\n    VerificationUtilisateur(sql: string, values: any[]): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            const mysqlConnector = new MysqlConnector();\r\n            console.log(\"éxécution du query\");\r\n            console.log(sql,values);\r\n            mysqlConnector.query(sql, values, (error, results) => {\r\n                if (error) {\r\n                    console.error('Erreur lors de l\\'exécution de la requête : ' + error.message);\r\n                    reject(error);\r\n                } else {\r\n                    console.log('Résultats de la requête :', results);\r\n                    resolve(results);\r\n                }\r\n    \r\n                // Fermez la connexion ici après avoir traité les résultats\r\n                mysqlConnector.close();\r\n            });\r\n        });\r\n    }\r\n\r\n    Insert(sql: string, values: any[]): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            const mysqlConnector = new MysqlConnector();\r\n            console.log(\"éxécution du query Insert\");\r\n            mysqlConnector.query(sql, values, (error, results) => {\r\n                if (error) {\r\n                    console.error('Erreur lors de l\\'exécution de la requête : ' + error.message);\r\n                    reject(error);\r\n                } else {\r\n                    console.log('Résultats de la requête :', results);\r\n                    resolve(results);\r\n                }\r\n    \r\n                // Fermez la connexion ici après avoir traité les résultats\r\n                mysqlConnector.close();\r\n            });\r\n        });\r\n    }\r\n\r\n    query(sql: string, values?: any[]): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            const mysqlConnector = new MysqlConnector();\r\n            console.log(\"éxécution du query\");\r\n            mysqlConnector.query(sql, values as any, (error, results) => {\r\n                if (error) {\r\n                    console.error('Erreur lors de l\\'exécution de la requête : ' + error.message);\r\n                    reject(error);\r\n                } else {\r\n                    console.log('Résultats de la requête :', results);\r\n                    resolve(results);\r\n                }\r\n    \r\n                // Fermez la connexion ici après avoir traité les résultats\r\n                mysqlConnector.close();\r\n            });\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\n","import mysql from 'mysql';\r\n\r\nexport default class MysqlConnector {\r\n  private connection: mysql.Connection;\r\n\r\n  constructor() {\r\n      // Configuration de la connexion à la base de données MySQL\r\n      this.connection = mysql.createConnection({\r\n        host: 'dbserver.c54ksqmeed2b.eu-central-1.rds.amazonaws.com', // Remplacez par votre endpoint RDS\r\n        port: 3306, // Le port par défaut pour MySQL\r\n        user: 'admin', // Remplacez par votre nom d'utilisateur RDS\r\n        password: 'PtW143kjkS3F', // Remplacez par votre mot de passe RDS\r\n        database: 'octopus_jjb',\r\n      });\r\n\r\n      // Établir la connexion à la base de données\r\n      this.connection.connect((err) => {\r\n          if (err) {\r\n              console.error('Erreur de connexion à la base de données : ' + err.stack);\r\n              return;\r\n          }\r\n          console.log('Connecté à la base de données MySQL avec l\\'ID : ' + this.connection.threadId);\r\n      });\r\n  }\r\n\r\n  public query(sql: string, values: any[], callback: (error: mysql.MysqlError | null, results?: any, fields?: mysql.FieldInfo[]) => void): void {\r\n    // Exécuter la requête SQL avec les valeurs échappées\r\n    this.connection.query(sql, values, (error, results, fields) => {\r\n        callback(error, results, fields);\r\n    });\r\n}\r\n\r\n  public close(): void {\r\n      // Fermer la connexion à la base de données\r\n      this.connection.end((err) => {\r\n          if (err) {\r\n              console.error('Erreur lors de la fermeture de la connexion : ' + err.stack);\r\n              return;\r\n          }\r\n          console.log('Connexion à la base de données MySQL fermée');\r\n      });\r\n  }\r\n}","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","import express from 'express';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\nimport {Client as SQLClient} from '../packages/db/client';\r\n\r\nconst router = express.Router();\r\n\r\ninterface Cour {\r\n    id: number;\r\n    type_cours: string;\r\n    date_cours: string;\r\n    heure_debut: string;\r\n    heure_fin: string;\r\n    participants?: Participant[];\r\n}\r\n  \r\ninterface Participant {\r\n    participant_id: number;\r\n    first_name: string;\r\n    last_name: string;\r\n    email: string;\r\n}\r\n\r\n\r\n// Endpoint pour la vérification de l'utilisateur\r\nrouter.get('/', async (req, res) => {\r\n  // Créer une instance du client SQL\r\n  const client = new SQLClient();\r\n\r\n  try {\r\n    // Première requête : récupérer les cours à venir\r\n    const queryCours = 'SELECT * FROM cours WHERE date_cours >= CURDATE() LIMIT 12';\r\n    const coursResults: Cour[] = await client.query(queryCours); // Récupère tous les cours à venir\r\n\r\n    if (coursResults.length === 0) {\r\n      return res.status(404).send('Aucun cours trouvé.');\r\n    }\r\n\r\n    // Retourner la liste des cours\r\n    res.json({ cours: coursResults });\r\n\r\n  } catch (err) {\r\n    console.error('Erreur lors du chargement des cours:', err);\r\n    res.status(500).send('Erreur lors du chargement des cours.');\r\n  }\r\n});\r\n\r\n  \r\n  \r\n  \r\n\r\nrouter.post('/participant', async (req, res) => {\r\n  const { cour_id } = req.body; // Récupérer l'ID du cours depuis le corps de la requête\r\n  console.log(cour_id);\r\n\r\n  if (!cour_id) {\r\n    return res.status(400).json({ message: \"L'ID du cours est requis.\" });\r\n  }\r\n\r\n  try {\r\n    // Créer une instance du client SQL (en supposant que tu utilises mysql2 ou mysql)\r\n    const client = new SQLClient(); // Assure-toi que ce client est bien configuré pour ta base de données\r\n\r\n    // Requête SQL pour récupérer les participants inscrits à ce cours\r\n    const query = `\r\n      SELECT utilisateurs.id AS participant_id, utilisateurs.last_name, utilisateurs.first_name, utilisateurs.email\r\n      FROM utilisateurs\r\n      JOIN inscriptions ON utilisateurs.id = inscriptions.utilisateur_id\r\n      WHERE inscriptions.cours_id = ?;\r\n    `;\r\n\r\n    // Exécuter la requête avec l'ID du cours\r\n    const results = await client.query(query, [cour_id]);\r\n\r\n    // Vérifier si les résultats sont valides\r\n    if (!results || results.length === 0) {\r\n      return res.status(404).json({ message: \"Aucun participant trouvé pour ce cours.\" });\r\n    }\r\n\r\n    // Utilisation sécurisée de 'participants'\r\n    const participants = results;\r\n\r\n    console.log(participants);\r\n\r\n    // Réponse avec les participants trouvés\r\n    res.status(200).json({ participants: participants, message: \"Participants trouvés avec succès.\" });\r\n\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des participants:', error);\r\n    return res.status(500).json({ message: \"Erreur serveur lors de la récupération des participants.\" });\r\n  }\r\n});\r\n\r\n\r\n\r\nrouter.post('/inscription', async (req, res) => {\r\n  const { last_name, first_name, email } = req.body.user;\r\n  const { id: coursId } = req.body.cours;\r\n\r\n  if (!last_name || !first_name || !email || !coursId) {\r\n    return res.status(400).json({ message: \"Des informations sont manquantes.\" });\r\n  }\r\n\r\n  try {\r\n    const client = new SQLClient();\r\n\r\n    // Requête pour récupérer l'ID de l'utilisateur\r\n    const queryUser = `\r\n      SELECT id FROM utilisateurs \r\n      WHERE last_name = ? AND first_name = ? AND email = ?;\r\n    `;\r\n    const resultUser = await client.query(queryUser, [last_name, first_name, email]);\r\n\r\n    if (resultUser.length === 0) {\r\n      return res.status(404).json({ message: \"Utilisateur non trouvé.\" });\r\n    }\r\n\r\n    const userId = resultUser[0].id;\r\n\r\n    // Vérification si l'utilisateur est déjà inscrit au cours\r\n    const queryCheck = `\r\n      SELECT * FROM inscriptions \r\n      WHERE utilisateur_id = ? AND cours_id = ?;\r\n    `;\r\n    const resultCheck = await client.query(queryCheck, [userId, coursId]);\r\n\r\n    console.log(resultCheck)\r\n\r\n    if (resultCheck.length > 0) {\r\n      // Informer que l'utilisateur est déjà inscrit\r\n      console.log(`Utilisateur déjà inscrit au cours ${coursId}`);\r\n      return res.status(409).json({ info_message: `Vous êtes déjà inscrit au cours ${coursId}` });\r\n    }\r\n\r\n    // Inscription de l'utilisateur\r\n    const queryInsert = `\r\n      INSERT INTO inscriptions (utilisateur_id, cours_id) \r\n      VALUES (?, ?);\r\n    `;\r\n    await client.query(queryInsert, [userId, coursId]);\r\n\r\n    // Réponse de succès\r\n    res.status(200).json({ success_message: \"Inscription réussie\", userId, coursId });\r\n\r\n  } catch (error) {\r\n    console.error('Erreur lors de l\\'inscription:', error);\r\n    res.status(500).json({ message: \"Erreur serveur lors de l'inscription.\" });\r\n  }\r\n});\r\n\r\n\r\n\r\n// Route pour valider la présence d'un participant\r\nrouter.post('/participant/cancel', async (req, res) => {\r\n  const { courId, participantId } = req.body; // Récupère les données envoyées par le front\r\n  \r\n  if (!courId || !participantId) {\r\n    return res.status(400).json({ message: 'Cour ID et Participant ID sont requis.' });\r\n  }\r\n\r\n  try {\r\n    const client = new SQLClient();\r\n    // Exécution de la requête d'update avec les paramètres\r\n    const result = await client.query(\r\n      'UPDATE inscriptions SET status = FALSE WHERE cours_id = ? AND utilisateur_id = ?',\r\n      [courId, participantId]\r\n    );\r\n\r\n    // Vérifie si des lignes ont été réellement modifiées\r\n    if (result.changedRows === 0) {\r\n      return res.status(404).json({ message: 'Aucun changement n\\'a eu lieu, vérifie si le participant est déjà validé.' });\r\n    }\r\n\r\n    // Si un changement a eu lieu\r\n    return res.status(200).json({ message: 'Participant supprimé avec succès.' });\r\n  } catch (error) {\r\n    console.error('Erreur lors de la mise à jour du statut :', error);\r\n    return res.status(500).json({ message: 'Erreur serveur.' });\r\n  }\r\n});\r\n\r\nrouter.post('/participant/validation', async (req, res) => {\r\n  const { courId, participantId } = req.body; // Récupère les données envoyées par le front\r\n  \r\n  if (!courId || !participantId) {\r\n    return res.status(400).json({ message: 'Cour ID et Participant ID sont requis.' });\r\n  }\r\n\r\n  try {\r\n    const client = new SQLClient();\r\n    // Exécution de la requête d'update avec les paramètres\r\n    const result = await client.query(\r\n      'UPDATE inscriptions SET status = TRUE WHERE cours_id = ? AND utilisateur_id = ?',\r\n      [courId, participantId]\r\n    );\r\n\r\n    // Vérifie si des lignes ont été réellement modifiées\r\n    if (result.changedRows === 0) {\r\n      return res.status(404).json({ message: 'Aucun changement n\\'a eu lieu, vérifie si le participant est déjà validé.' });\r\n    }\r\n\r\n    // Si un changement a eu lieu\r\n    return res.status(200).json({ message: 'Participant validé avec succès.' });\r\n  } catch (error) {\r\n    console.error('Erreur lors de la mise à jour du statut :', error);\r\n    return res.status(500).json({ message: 'Erreur serveur.' });\r\n  }\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default router;","import express from 'express';\r\nimport bcrypt from 'bcrypt';\r\nimport { Client as SQLClient } from '../packages/db/client';\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post('/', async (req, res) => {\r\n    const { firstName, lastName, email, password, date, tarif, genre } = req.body;\r\n\r\n    console.log(firstName, lastName, email, password, date, tarif, genre);\r\n\r\n    // Vérification des champs requis\r\n    if (!firstName || !lastName || !email || !password || !date || !tarif || !genre) {\r\n        return res.status(400).send('Tous les champs sont requis');\r\n    }\r\n\r\n    const client = new SQLClient();\r\n\r\n    try {\r\n        // Vérifier si l'utilisateur existe déjà\r\n        const userExistsQuery = 'SELECT * FROM utilisateurs WHERE email = ?';\r\n        const existingUsers = await client.query(userExistsQuery, [email]);\r\n\r\n        if (existingUsers.length > 0) {\r\n            return res.status(400).send('Un utilisateur avec cet email existe déjà');\r\n        }\r\n\r\n        // Récupérer l'ID du genre sélectionné\r\n        const genreQuery = 'SELECT id FROM genres WHERE genre_name = ?';\r\n        const genreResult = await client.query(genreQuery, [genre]);\r\n\r\n        if (genreResult.length === 0) {\r\n            return res.status(400).send('Genre invalide');\r\n        }\r\n\r\n        const genreId = genreResult[0].id;\r\n\r\n        // Récupérer l'ID du tarif sélectionné\r\n        const tarifQuery = 'SELECT id FROM plans_tarifaires WHERE nom_plan = ?';\r\n        const tarifResult = await client.query(tarifQuery, [tarif]);\r\n\r\n        if (tarifResult.length === 0) {\r\n            return res.status(400).send('Tarif invalide');\r\n        }\r\n\r\n        const tarifId = tarifResult[0].id;\r\n        console.log(tarifId,genreId)\r\n\r\n        // Hash du mot de passe\r\n        const saltRounds = 10;\r\n        const hashedPassword = await bcrypt.hash(password, saltRounds);\r\n\r\n        // Insérer l'utilisateur avec les IDs du genre et du tarif, et abonnement à la fin\r\n        const insertQuery = `\r\n            INSERT INTO utilisateurs (first_name, last_name, email, password, gender, date_of_birth, status, grade, abonnement)\r\n            VALUES (?, ?, ?, ?, ?, ?, 'user', '1', ?)\r\n        `;\r\n\r\n        await client.query(insertQuery, [firstName, lastName, email, hashedPassword, genreId, date, tarifId]);\r\n\r\n        res.status(201).json({ message: 'Utilisateur enregistré avec succès' });\r\n\r\n    } catch (error) {\r\n        console.error('Erreur lors de l\\'inscription', error);\r\n        res.status(500).send('Erreur lors de l\\'inscription');\r\n    }\r\n});\r\n\r\n\r\n\r\nexport default router;\r\n","import express from 'express';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\nimport {Client as SQLClient} from '../packages/db/client';\r\n\r\nconst router = express.Router();\r\n\r\n\r\n\r\nrouter.post('/', async (req, res) => {\r\n    const utilisateurs = req.body; \r\n    const client = new SQLClient(); \r\n\r\n    try {\r\n        for (const utilisateur of utilisateurs) {\r\n            const { nom, email, cours } = utilisateur;\r\n\r\n            // Vérifier si l'utilisateur existe déjà\r\n            const userQuery = `SELECT * FROM utilisateurs WHERE email = ?`;\r\n            const userValues = [email];\r\n            const existingUser = await client.query(userQuery, userValues);\r\n\r\n            if (existingUser.length > 0) {\r\n                console.log(`L'utilisateur avec l'email ${email} existe déjà.`);\r\n                return res.status(400).json({ message: `L'utilisateur avec cet email existe déjà.` });\r\n            }\r\n\r\n            // Insérer l'utilisateur\r\n            const insertUserQuery = `INSERT INTO utilisateurs (first_name, email, status) VALUES (?, ?, 'visitor')`;\r\n            const userResult = await client.query(insertUserQuery, [nom, email]);\r\n            const utilisateurId = userResult.insertId; // Récupérer l'ID de l'utilisateur\r\n\r\n            console.log(\"Utilisateur inséré avec succès, ID:\", utilisateurId);\r\n\r\n\r\n            for (const cour of cours) {\r\n                const { id: coursId } = cour; \r\n\r\n                // Vérifier si l'utilisateur a déjà réservé ce cours\r\n                const checkQuery = `\r\n                    SELECT * FROM reservations \r\n                    WHERE utilisateur_id = ? AND cours_id = ?\r\n                `;\r\n                const checkValues = [utilisateurId, coursId];\r\n                const existingReservation = await client.query(checkQuery, checkValues);\r\n\r\n                if (existingReservation.length > 0) {\r\n                    console.log(`L'utilisateur ID: ${utilisateurId} a déjà réservé ce cours ID: ${coursId}`);\r\n                    return res.status(400).json({ message: `L'utilisateur a déjà réservé ce cours.` });\r\n                }\r\n\r\n                // Créer la réservation\r\n                await client.query(\r\n                    'INSERT INTO reservations (utilisateur_id, cours_id) VALUES (?, ?)', \r\n                    [utilisateurId, coursId]\r\n                );\r\n\r\n                console.log(`Réservation créée pour l'utilisateur ID: ${utilisateurId} et le cours ID: ${coursId}`);\r\n            }\r\n\r\n            // Vérifier le statut de l'utilisateur après insertion\r\n            const statusQuery = `SELECT status FROM utilisateurs WHERE id = ?`;\r\n            const statusResult = await client.query(statusQuery, [utilisateurId]);\r\n            const userStatus = statusResult[0] ? statusResult[0].status : null; // Obtenir le statut\r\n            res.status(200).json({ message: 'Utilisateurs et réservations créés avec succès.', role: userStatus });\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error('Erreur lors de la création des utilisateurs et réservations:', error);\r\n        res.status(500).json({ error: 'Erreur serveur lors de la création.' });\r\n    } finally {\r\n        // Optionnel : fermer la connexion à la base de données si nécessaire\r\n        // await client.close();\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\nrouter.post('/verification', async (req, res) => {\r\n    const { nom, email } = req.body;\r\n    console.log(\"Nom:\", nom, \"Email:\", email);\r\n    console.log(\"Vérification en cours...\");\r\n\r\n    const client = new SQLClient(); \r\n\r\n    try {\r\n        // Étape 1: Vérifier si l'utilisateur existe\r\n        const userQuery = `\r\n            SELECT * FROM utilisateurs \r\n            WHERE email = ?\r\n        `;\r\n        const userValues = [email];\r\n        const existingUser = await client.query(userQuery, userValues);\r\n\r\n        // Étape 2: Si l'utilisateur n'existe pas, permettre l'inscription\r\n        if (existingUser.length === 0) {\r\n            console.log(`L'utilisateur ${nom} (${email}) n'est pas inscrit.`);\r\n            return res.status(200).json({ canRegister: true }); // Indique que l'utilisateur peut s'inscrire\r\n        }\r\n\r\n        // Étape 3: Si l'utilisateur existe, vérifier les réservations\r\n        const utilisateurId = existingUser[0].id; \r\n        const reservationQuery = `\r\n            SELECT * FROM reservations \r\n            WHERE utilisateur_id = ?\r\n        `;\r\n        const reservationValues = [utilisateurId];\r\n        const reservations = await client.query(reservationQuery, reservationValues);\r\n        \r\n        // Étape 4: Si l'utilisateur a déjà réservé, renvoyer un message d'erreur\r\n        if (reservations.length > 0) {\r\n            console.log(`L'utilisateur ${nom} (${email}) a déjà réservé un cours.`);\r\n            return res.status(400).json({ message: \"Vous avez déjà réservé un cours d'essai.\", canRegister: false }); // Indique que l'utilisateur ne peut pas s'inscrire\r\n        }\r\n\r\n        // Étape 5: Aucune réservation existante\r\n        res.status(200).json({ message: \"Aucune réservation existante pour cet utilisateur.\", canRegister: true }); // Indique que l'utilisateur peut réserver\r\n        \r\n    } catch (error) {\r\n        console.error('Erreur lors de la vérification des réservations:', error);\r\n        res.status(500).json({ error: 'Erreur serveur lors de la vérification.' });\r\n    } finally {\r\n       \r\n    }\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default router;","import express from 'express';\r\nimport jwt from 'jsonwebtoken';\r\nimport {Client as SQLClient} from '../packages/db/client';\r\n\r\nconst router = express.Router();\r\n\r\n\r\nfunction formatDate(dateString: string, format: 'YYYY-MM-DD' | 'YYYY-MM' = 'YYYY-MM-DD'): string {\r\n  const date = new Date(dateString);\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, '0');\r\n  const day = String(date.getDate()).padStart(2, '0');\r\n\r\n  if (format === 'YYYY-MM') {\r\n    return `${year}-${month}`;\r\n  }\r\n\r\n  return `${year}-${month}-${day}`;\r\n}\r\n\r\ninterface Participant {\r\n  inscription_id: number;\r\n  cours_id: number;\r\n  date_cours: string;\r\n  type_cours: string;\r\n  heure_debut: string;\r\n  heure_fin: string;\r\n  status: string;\r\n  participant_first_name: string;\r\n  participant_last_name: string;\r\n}\r\n\r\ninterface Courses {\r\n  month: string; // Mois sous forme de 'YYYY-MM'\r\n  total_courses: number; // Nombre total de cours dans le mois\r\n  presences: [];\r\n}\r\n\r\n\r\n\r\nrouter.get('/', async(req, res) => {\r\n\r\n  const { email, nom, prenom } = req.query;\r\n  console.log('Requête reçue:', req.query);  // Log pour vérifier les paramètres reçus\r\n  \r\n  try {\r\n    const client = new SQLClient();\r\n    \r\n    // Requête pour récupérer l'ID de l'utilisateur\r\n    const userIdQuery = `\r\n      SELECT id\r\n      FROM utilisateurs\r\n      WHERE email = ? AND last_name = ? AND first_name = ?;\r\n    `;\r\n    \r\n    // Exécuter la requête pour récupérer l'ID de l'utilisateur\r\n    const [user] = await client.query(userIdQuery, [email, nom, prenom]);\r\n    console.log(\"Utilisateur trouvé:\", user);\r\n\r\n    // Si l'utilisateur n'est pas trouvé, renvoyer une erreur\r\n    if (!user) {\r\n      return res.status(404).json({ message: \"Utilisateur non trouvé\" });\r\n    }\r\n\r\n    const userId = user.id; // Obtenir l'ID de l'utilisateur\r\n\r\n    // Requête pour récupérer les inscriptions aux cours, incluant les informations des participants\r\n    const presencesQuery = `\r\n      SELECT \r\n        i.id AS inscription_id, \r\n        i.cours_id, \r\n        c.date_cours, \r\n        c.type_cours, \r\n        c.heure_debut, \r\n        c.heure_fin, \r\n        i.status, \r\n        u.first_name AS participant_first_name, \r\n        u.last_name AS participant_last_name \r\n      FROM inscriptions i\r\n      JOIN cours c ON i.cours_id = c.id\r\n      JOIN utilisateurs u ON i.utilisateur_id = u.id\r\n      WHERE i.utilisateur_id = ?;\r\n    `;\r\n    \r\n    const presences = await client.query(presencesQuery, [userId]);\r\n    console.log(\"Présences récupérées:\", presences);\r\n\r\n    // Si aucune présence n'est trouvée\r\n    if (!presences.length) {\r\n      console.log(\"Aucune inscription trouvée pour cet utilisateur.\");\r\n    }\r\n\r\n    // Requête pour récupérer le nombre total de cours par mois\r\n    const totalCoursesQuery = `\r\n      SELECT DATE_FORMAT(date_cours, '%Y-%m') AS month, COUNT(*) AS total_courses\r\n      FROM cours\r\n      GROUP BY DATE_FORMAT(date_cours, '%Y-%m')\r\n      ORDER BY month ASC;\r\n    `;\r\n    \r\n    const totalCourses = await client.query(totalCoursesQuery);\r\n    // Parcourir chaque cours dans totalCourses\r\n    const totalCoursesWithPresences = totalCourses.map((course: Courses) => {\r\n      const courseMonth = course.month; // Déjà formaté en 'YYYY-MM'\r\n      const participantsForCourse: Participant[] = []; // Tableau pour stocker les participants pour ce mois\r\n\r\n      // Parcourir les présences (participants)\r\n      presences.forEach((participant: Participant) => {\r\n        const participantMonth = formatDate(participant.date_cours, \"YYYY-MM\"); // Formater la date de présence en 'YYYY-MM'\r\n\r\n        // Si le mois de la présence et du cours correspondent\r\n        if (courseMonth === participantMonth) {\r\n          // Ajouter le participant à la liste des présences pour ce cours\r\n          participantsForCourse.push({\r\n            inscription_id: participant.inscription_id,\r\n            cours_id: participant.cours_id,\r\n            date_cours: participant.date_cours,\r\n            type_cours: participant.type_cours,\r\n            heure_debut: participant.heure_debut,\r\n            heure_fin: participant.heure_fin,\r\n            status: participant.status,\r\n            participant_first_name: participant.participant_first_name,\r\n            participant_last_name: participant.participant_last_name\r\n          });\r\n        }\r\n      });\r\n\r\n  // Retourner le cours avec les participants ajoutés\r\n    return {\r\n      month: courseMonth,\r\n      total_courses: course.total_courses,\r\n      presences: participantsForCourse // Ajouter les participants (présences)\r\n    };\r\n  });\r\n\r\n\r\n\r\n    \r\n\r\n    // Renvoyer les données au front-end\r\n    res.json({\r\n      totalCourses: totalCoursesWithPresences\r\n    });\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des données :', error);\r\n    res.status(500).json({ message: 'Erreur interne du serveur' });\r\n  }\r\n});\r\n\r\n\r\nrouter.post('/', async (req, res) => {\r\n  const { email, last_name, first_name } = req.body;\r\n\r\n  console.log(\"Données reçues via body:\", { email, last_name, first_name });\r\n\r\n  try {\r\n    const client = new SQLClient();\r\n    \r\n    // Requête pour récupérer l'ID de l'utilisateur\r\n    const userIdQuery = `\r\n      SELECT id\r\n      FROM utilisateurs\r\n      WHERE email = ? AND last_name = ? AND first_name = ?;\r\n    `;\r\n    \r\n    // Exécuter la requête pour récupérer l'ID de l'utilisateur\r\n    const [user] = await client.query(userIdQuery, [email, last_name, first_name]);\r\n    console.log(\"Utilisateur trouvé:\", user);\r\n\r\n    // Si l'utilisateur n'est pas trouvé, renvoyer une erreur\r\n    if (!user) {\r\n      return res.status(404).json({ message: \"Utilisateur non trouvé\" });\r\n    }\r\n\r\n    const userId = user.id; // Obtenir l'ID de l'utilisateur\r\n\r\n    // Requête pour récupérer les inscriptions aux cours, incluant les informations des participants\r\n    const presencesQuery = `\r\n      SELECT \r\n        i.id AS inscription_id, \r\n        i.cours_id, \r\n        c.date_cours, \r\n        c.type_cours, \r\n        c.heure_debut, \r\n        c.heure_fin, \r\n        i.status, \r\n        u.first_name AS participant_first_name, \r\n        u.last_name AS participant_last_name \r\n      FROM inscriptions i\r\n      JOIN cours c ON i.cours_id = c.id\r\n      JOIN utilisateurs u ON i.utilisateur_id = u.id\r\n      WHERE i.utilisateur_id = ?;\r\n    `;\r\n    \r\n    const presences = await client.query(presencesQuery, [userId]);\r\n    console.log(\"Présences récupérées:\", presences);\r\n\r\n    // Si aucune présence n'est trouvée\r\n    if (!presences.length) {\r\n      console.log(\"Aucune inscription trouvée pour cet utilisateur.\");\r\n    }\r\n\r\n    // Requête pour récupérer le nombre total de cours par mois\r\n    const totalCoursesQuery = `\r\n      SELECT DATE_FORMAT(date_cours, '%Y-%m') AS month, COUNT(*) AS total_courses\r\n      FROM cours\r\n      GROUP BY DATE_FORMAT(date_cours, '%Y-%m')\r\n      ORDER BY month ASC;\r\n    `;\r\n    \r\n    const totalCourses = await client.query(totalCoursesQuery);\r\n    // Parcourir chaque cours dans totalCourses\r\n    const totalCoursesWithPresences = totalCourses.map((course: Courses) => {\r\n      const courseMonth = course.month; // Déjà formaté en 'YYYY-MM'\r\n      const participantsForCourse: Participant[] = []; // Tableau pour stocker les participants pour ce mois\r\n\r\n      // Parcourir les présences (participants)\r\n      presences.forEach((participant: Participant) => {\r\n        const participantMonth = formatDate(participant.date_cours, \"YYYY-MM\"); // Formater la date de présence en 'YYYY-MM'\r\n\r\n        // Si le mois de la présence et du cours correspondent\r\n        if (courseMonth === participantMonth) {\r\n          // Ajouter le participant à la liste des présences pour ce cours\r\n          participantsForCourse.push({\r\n            inscription_id: participant.inscription_id,\r\n            cours_id: participant.cours_id,\r\n            date_cours: participant.date_cours,\r\n            type_cours: participant.type_cours,\r\n            heure_debut: participant.heure_debut,\r\n            heure_fin: participant.heure_fin,\r\n            status: participant.status,\r\n            participant_first_name: participant.participant_first_name,\r\n            participant_last_name: participant.participant_last_name\r\n          });\r\n        }\r\n      });\r\n\r\n  // Retourner le cours avec les participants ajoutés\r\n    return {\r\n      month: courseMonth,\r\n      total_courses: course.total_courses,\r\n      presences: participantsForCourse // Ajouter les participants (présences)\r\n    };\r\n  });\r\n\r\n\r\n\r\n    \r\n\r\n    // Renvoyer les données au front-end\r\n    res.json({\r\n      totalCourses: totalCoursesWithPresences\r\n    });\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des données :', error);\r\n    res.status(500).json({ message: 'Erreur interne du serveur' });\r\n  }\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default router;","import express from 'express';\r\nimport jwt from 'jsonwebtoken';\r\nimport { Client as SQLClient } from '../packages/db/client';\r\n\r\nconst router = express.Router();\r\n\r\n\r\n// Appliquer le middleware de vérification du token sur ce routeur\r\nrouter.post('/', async (req, res) => {\r\n  const { email } = req.body;\r\n\r\n  if (!email) {\r\n    return res.status(400).send('Email requis.');\r\n  }\r\n\r\n  const client = new SQLClient();\r\n\r\n  try {\r\n    const query = `\r\n      SELECT email, first_name, last_name, created_at \r\n      FROM utilisateurs \r\n      WHERE email = ?`;\r\n    const values = [email];\r\n\r\n    const results = await client.query(query, values);\r\n\r\n    if (results.length === 0) {\r\n      return res.status(404).send('Utilisateur non trouvé.');\r\n    }\r\n\r\n    const userInfo = {\r\n      email: results[0].email,\r\n      first_name: results[0].first_name,\r\n      last_name: results[0].last_name,\r\n      created_at: results[0].created_at // Date de création du compte\r\n    };\r\n\r\n    console.log(\"Informations utilisateur trouvées :\", userInfo);\r\n    return res.status(200).json(userInfo);\r\n\r\n  } catch (err) {\r\n    console.error('Erreur lors de la récupération des informations utilisateur:', err);\r\n    return res.status(500).send('Erreur lors de la récupération des informations.');\r\n  }\r\n});\r\n\r\nexport default router;\r\n","import express from 'express';\r\nimport jwt from 'jsonwebtoken';\r\nimport { Client as SQLClient } from '../packages/db/client';\r\n\r\nconst router = express.Router();\r\n\r\n\r\nrouter.post('/',async (req, res) => {\r\n  const { email, first_name, last_name} = req.body; \r\n  console.log(\"Requête reçue avec les données :\", req.body);\r\n\r\n  console.log(email, first_name, last_name)\r\n\r\n  if (!email || !first_name || !last_name) {\r\n    return res.status(400).send('Tous les champs sont requis.');\r\n  }\r\n\r\n  const client = new SQLClient();\r\n\r\n  try {\r\n    // Requête pour récupérer l'utilisateur\r\n    const query = `\r\n      SELECT * FROM utilisateurs \r\n      WHERE email = ? AND first_name = ? AND last_name = ?`;\r\n    const values = [email, first_name, last_name];\r\n\r\n    const results = await client.query(query, values);\r\n\r\n    if (results.length === 0) {\r\n      return res.status(404).send('Utilisateur non trouvé.');\r\n    }\r\n\r\n    console.log(results)\r\n\r\n    const userInfo = {\r\n      email: results[0].email,\r\n      first_name: results[0].first_name,\r\n      last_name: results[0].last_name,\r\n      role: results[0].status,\r\n      gender: results[0].gender,\r\n      date_of_birth: results[0].date_of_birth,\r\n      grade: null,\r\n      abonnement: null\r\n    };\r\n\r\n    // Requête pour récupérer le nom du grade à partir de l'ID du grade\r\n    const gradeQuery = `\r\n      SELECT grade FROM grades WHERE id = ?`; // Recherche par ID du grade\r\n    const gradeResults = await client.query(gradeQuery, [results[0].grade]);\r\n\r\n    console.log(gradeResults)\r\n\r\n    if (gradeResults.length > 0) {\r\n      userInfo.grade = gradeResults[0].grade; // Ajout du nom du grade dans 'grade'\r\n    } else {\r\n      userInfo.grade = null; // Valeur par défaut si aucune correspondance\r\n    }\r\n\r\n    // Requête pour récupérer le nom du genre à partir de l'ID du genre\r\n    const genreQuery = `SELECT genre_name FROM genres WHERE id = ?`;\r\n    const genreResults = await client.query(genreQuery, [results[0].gender]);\r\n\r\n    if (genreResults.length > 0) {\r\n      userInfo.gender = genreResults[0].genre_name; // Ajout du nom du genre dans 'gender'\r\n    }\r\n\r\n    // Requête pour récupérer le type d'abonnement à partir de l'ID d'abonnement\r\n    const abonnementQuery = `SELECT nom_plan FROM plans_tarifaires WHERE id = ?`;\r\n    const abonnementResults = await client.query(abonnementQuery, [results[0].abonnement]);\r\n\r\n    if (abonnementResults.length > 0) {\r\n      userInfo.abonnement = abonnementResults[0].nom_plan; // Ajout du nom du plan d'abonnement\r\n    }\r\n\r\n    console.log(\"Informations utilisateur trouvées :\", userInfo);\r\n    return res.status(200).json(userInfo);\r\n\r\n  } catch (err) {\r\n    console.error('Erreur lors de la récupération des informations utilisateur:', err);\r\n    return res.status(500).send('Erreur lors de la récupération des informations.');\r\n  }\r\n});\r\n\r\n// Appliquer le middleware de vérification du token sur ce routeur\r\nrouter.get('/abonnement', async (req, res) => {\r\n  const client = new SQLClient();\r\n\r\n  try {\r\n    // Requête pour récupérer les noms des abonnements et leurs prix\r\n    const query = `\r\n      SELECT nom_plan, prix\r\n      FROM plans_tarifaires`;\r\n    \r\n    const results = await client.query(query);\r\n\r\n    if (results.length === 0) {\r\n      return res.status(404).send('Aucun plan tarifaire trouvé.');\r\n    }\r\n\r\n    // Extraire les noms des abonnements et les prix sous forme d'objets\r\n    const abonnements = results.map(plan => ({\r\n      nom_plan: plan.nom_plan,\r\n      prix: plan.prix\r\n    }));\r\n\r\n    console.log(\"Plans tarifaires trouvés :\", abonnements);\r\n    return res.status(200).json(abonnements);\r\n\r\n  } catch (err) {\r\n    console.error('Erreur lors de la récupération des plans tarifaires:', err);\r\n    return res.status(500).send('Erreur lors de la récupération des plans tarifaires.');\r\n  }\r\n});\r\n\r\n// Appliquer le middleware de vérification du token sur ce routeur\r\nrouter.get('/gender', async (req, res) => {\r\n  const client = new SQLClient();\r\n\r\n  try {\r\n    // Requête pour récupérer les noms des abonnements et leurs prix\r\n    const query = `\r\n      SELECT genre_name\r\n      FROM genres`;\r\n    \r\n    const results = await client.query(query);\r\n\r\n    if (results.length === 0) {\r\n      return res.status(404).send('Aucun plan tarifaire trouvé.');\r\n    }\r\n\r\n    // Extraire les noms des abonnements et les prix sous forme d'objets\r\n    const genres = results.map(genre => ({\r\n      genre: genre.genre_name\r\n    }));\r\n\r\n    console.log(\"Plans genres trouvés :\", genres);\r\n    return res.status(200).json(genres);\r\n\r\n  } catch (err) {\r\n    console.error('Erreur lors de la récupération des plans tarifaires:', err);\r\n    return res.status(500).send('Erreur lors de la récupération des plans tarifaires.');\r\n  }\r\n});\r\n\r\n// Appliquer le middleware de vérification du token sur ce routeur\r\nrouter.get('/grade', async (req, res) => {\r\n  const client = new SQLClient();\r\n\r\n  try {\r\n    // Requête pour récupérer les noms des abonnements et leurs prix\r\n    const query = `\r\n      SELECT *\r\n      FROM grades`;\r\n    \r\n    const results = await client.query(query);\r\n\r\n    if (results.length === 0) {\r\n      return res.status(404).send('Aucun plan tarifaire trouvé.');\r\n    }\r\n\r\n    console.log(\"grades trouvés :\", results);\r\n    return res.status(200).json(results);\r\n\r\n  } catch (err) {\r\n    console.error('Erreur lors de la récupération des plans tarifaires:', err);\r\n    return res.status(500).send('Erreur lors de la récupération des plans tarifaires.');\r\n  }\r\n});\r\n\r\n\r\n\r\n\r\nexport default router;\r\n","import express from 'express';\r\nimport bcrypt from 'bcrypt'; \r\nimport { Client as SQLClient } from '../packages/db/client';\r\n\r\nconst router = express.Router();\r\n\r\n\r\nrouter.post('/', async (req, res) => {\r\n  const { email, newpassword } = req.body;\r\n\r\n  console.log(email, newpassword)\r\n\r\n  if (!email || !newpassword) {\r\n    return res.status(400).json({ message: 'Email et mot de passe sont requis' });\r\n  }\r\n\r\n  try {\r\n    // Recherche l'utilisateur dans la base de données\r\n    const client = new SQLClient();\r\n    const query = 'SELECT * FROM utilisateurs WHERE email = ?';\r\n    const values = [email];\r\n    const results = await client.query(query, values);\r\n\r\n    console.log(results)\r\n\r\n    if (results.length === 0) {\r\n      return res.status(404).json({ message: 'Utilisateur non trouvé' });\r\n    }\r\n\r\n    const user = results[0];\r\n\r\n    // Vérification du nouveau mot de passe (exemple de validation)\r\n    if (newpassword.length < 8) {\r\n      return res.status(400).json({ message: 'Le mot de passe doit contenir au moins 8 caractères' });\r\n    }\r\n\r\n    // Hachage du nouveau mot de passe avec bcrypt\r\n    const hashedPassword = await bcrypt.hash(newpassword, 10);\r\n\r\n    // Mise à jour du mot de passe dans la base de données\r\n    const updateQuery = 'UPDATE utilisateurs SET password = ? WHERE email = ?';\r\n    await client.query(updateQuery, [hashedPassword, email]);\r\n\r\n    // Réponse de succès\r\n    res.status(200).json({ message: 'Mot de passe changé avec succès' });\r\n  } catch (err) {\r\n    console.error('Erreur lors de la mise à jour du mot de passe', err);\r\n    res.status(500).json({ message: 'Erreur serveur lors de la mise à jour du mot de passe' });\r\n  }\r\n});\r\n\r\n\r\nexport default router;","import express from 'express';\r\nimport jwt from 'jsonwebtoken';\r\nimport {Client as SQLClient} from '../packages/db/client';\r\n\r\nconst router = express.Router();\r\n\r\n// Middleware pour vérifier le token JWT\r\nconst verifyToken = (req:any, res:any, next:any) => {\r\n  const token = req.cookies.token;\r\n\r\n  if (!token) {\r\n    return res.status(403).send('Token manquant, veuillez vous connecter.');\r\n  }\r\n\r\n  const secretKey = process.env.TOKEN_SECRET;\r\n  if (!secretKey) {\r\n    return res.status(500).send('Clé secrète JWT manquante.');\r\n  }\r\n\r\n  jwt.verify(token, secretKey, (err:any, decoded:any) => {\r\n    if (err) {\r\n      return res.status(403).send('Token invalide ou expiré.');\r\n    }\r\n\r\n    req.user = decoded;  // Ajoute l'utilisateur décodé à la requête\r\n    next();\r\n  });\r\n};\r\n\r\nrouter.get('/', async (req, res) => {\r\n\r\n  const client = new SQLClient();\r\n\r\n  try {\r\n    // Requête pour récupérer tous les utilisateurs\r\n    const query = `\r\n      SELECT * FROM utilisateurs`;\r\n\r\n    const results = await client.query(query); // Pas besoin de `values` ici\r\n\r\n    if (results.length === 0) {\r\n      return res.status(404).send('Aucun utilisateur trouvé.');\r\n    }\r\n\r\n    console.log(results);\r\n\r\n    // Tableau pour stocker les informations des utilisateurs\r\n    const usersInfo = [];\r\n\r\n    // Boucle pour récupérer les informations de chaque utilisateur\r\n    for (const user of results) {\r\n      const userInfo = {\r\n        id: user.id,\r\n        first_name: user.first_name,\r\n        last_name: user.last_name,\r\n        gender: user.gender,\r\n        grade: null // Initialisé à null\r\n      };\r\n\r\n      // Requête pour récupérer le nom du grade à partir de l'ID du grade\r\n      const gradeQuery = `\r\n        SELECT grade FROM grades WHERE id = ?`;\r\n      const gradeResults = await client.query(gradeQuery, [user.grade]);\r\n\r\n      if (gradeResults.length > 0) {\r\n        userInfo.grade = gradeResults[0].grade; // Ajout du nom du grade\r\n      }\r\n\r\n      // Ajouter l'objet utilisateur avec le grade au tableau\r\n      usersInfo.push(userInfo);\r\n    }\r\n\r\n    console.log(\"Informations utilisateurs trouvées :\", usersInfo);\r\n    return res.status(200).json(usersInfo);\r\n\r\n  } catch (err) {\r\n    console.error('Erreur lors de la récupération des informations des utilisateurs :', err);\r\n    return res.status(500).send('Erreur lors de la récupération des informations.');\r\n  }\r\n});\r\n\r\nrouter.post('/infos', async (req, res) => {\r\n  const { user_id } = req.body; \r\n  console.log(\"Requête reçue avec les données :\", req.body);\r\n\r\n\r\n  const client = new SQLClient();\r\n\r\n  try {\r\n     // Requête pour récupérer un utilisateur en fonction de son ID\r\n     const query = `SELECT * FROM utilisateurs WHERE id = ?`;\r\n\r\n     const results = await client.query(query, [user_id]); // Utilisation de l'ID de l'utilisateur\r\n\r\n    if (results.length === 0) {\r\n      return res.status(404).send('Utilisateur non trouvé.');\r\n    }\r\n\r\n    const userInfo = {\r\n      email: results[0].email,\r\n      first_name: results[0].first_name,\r\n      last_name: results[0].last_name,\r\n      role: results[0].status,\r\n      gender: null,\r\n      date_of_birth: results[0].date_of_birth,\r\n      grade: null,\r\n      abonnement: null\r\n    };\r\n\r\n    // Requête pour récupérer le nom du grade à partir de l'ID du grade\r\n    const gradeQuery = `SELECT grade FROM grades WHERE id = ?`;\r\n    const gradeResults = await client.query(gradeQuery, [results[0].grade]);\r\n\r\n    if (gradeResults.length > 0) {\r\n      userInfo.grade = gradeResults[0].grade; // Ajout du nom du grade dans 'grade'\r\n    }\r\n\r\n    // Requête pour récupérer le nom du genre à partir de l'ID du genre\r\n    const genreQuery = `SELECT genre_name FROM genres WHERE id = ?`;\r\n    const genreResults = await client.query(genreQuery, [results[0].gender]);\r\n\r\n    if (genreResults.length > 0) {\r\n      userInfo.gender = genreResults[0].genre_name; // Ajout du nom du genre dans 'gender'\r\n    }\r\n\r\n    // Requête pour récupérer le type d'abonnement à partir de l'ID d'abonnement\r\n    const abonnementQuery = `SELECT nom_plan FROM plans_tarifaires WHERE id = ?`;\r\n    const abonnementResults = await client.query(abonnementQuery, [results[0].abonnement]);\r\n\r\n    if (abonnementResults.length > 0) {\r\n      userInfo.abonnement = abonnementResults[0].nom_plan; // Ajout du nom du plan d'abonnement\r\n    }\r\n\r\n    console.log(\"Informations utilisateur trouvées :\", userInfo);\r\n    return res.status(200).json(userInfo);\r\n\r\n  } catch (err) {\r\n    console.error('Erreur lors de la récupération des informations utilisateur:', err);\r\n    return res.status(500).send('Erreur lors de la récupération des informations.');\r\n  }\r\n});\r\n\r\n\r\n// Route pour récupérer et mettre à jour les informations utilisateur\r\nrouter.patch('/update', async (req, res) => {\r\n  const { new_email, new_first_name, new_last_name, current_mail } = req.body;\r\n\r\n  // Vérification que l'email actuel est présent\r\n  if (!current_mail) {\r\n    return res.status(400).json({ success: false, message: 'L\\'email actuel est requis pour la mise à jour.' });\r\n  }\r\n\r\n  try {\r\n    const client = new SQLClient();\r\n\r\n    // Étape 1: Récupérer les informations actuelles de l'utilisateur\r\n    const selectQuery = `SELECT * FROM utilisateurs WHERE email = ?;`;\r\n    const resultUtilisateur = await client.query(selectQuery, [current_mail]);\r\n\r\n    // Vérifier si l'utilisateur existe\r\n    if (resultUtilisateur.length === 0) {\r\n      return res.status(404).json({ success: false, message: 'Utilisateur non trouvé.' });\r\n    }\r\n\r\n    const user = resultUtilisateur[0];  // Informations actuelles de l'utilisateur\r\n\r\n    // Étape 2: Mettre à jour les informations de l'utilisateur\r\n    const updatedFirstName = new_first_name || user.first_name;\r\n    const updatedLastName = new_last_name || user.last_name;\r\n    const updatedEmail = new_email || user.email;\r\n\r\n    const updateQuery = `\r\n      UPDATE utilisateurs\r\n      SET first_name = ?, last_name = ?, email = ?\r\n      WHERE email = ?;\r\n    `;\r\n\r\n    // Exécution de la mise à jour avec les nouvelles données\r\n    const updateResult = await client.query(updateQuery, [updatedFirstName, updatedLastName, updatedEmail, current_mail]);\r\n\r\n    if (updateResult.affectedRows === 0) {\r\n      return res.status(500).json({ success: false, message: 'La mise à jour a échoué.' });\r\n    }\r\n\r\n    // Étape 3: Récupérer les informations mises à jour\r\n    const updatedRows = await client.query(selectQuery, [updatedEmail]);\r\n\r\n    const userInfo = {\r\n      email: updatedRows[0].email,\r\n      first_name: updatedRows[0].first_name,\r\n      last_name: updatedRows[0].last_name,\r\n      role: updatedRows[0].status\r\n    };\r\n\r\n    if (updatedRows.length === 0) {\r\n      return res.status(500).json({ success: false, message: 'Erreur lors de la récupération des données mises à jour.' });\r\n    }\r\n\r\n\r\n    // Répondre avec les informations mises à jour\r\n    res.status(200).json({ success: true, message: 'Utilisateur mis à jour avec succès.', data: userInfo });\r\n  } catch (error) {\r\n    console.error('Erreur lors de la mise à jour des informations utilisateur:', error);\r\n    res.status(500).json({ success: false, message: 'Erreur serveur.' });\r\n  }\r\n});\r\n\r\nrouter.post('/infos/update', async (req, res) => {\r\n  const { user_id, data } = req.body;\r\n  console.log(\"genre:\" + data.genre, \"rôle:\" + data.role,);\r\n\r\n  try {\r\n    const client = new SQLClient();\r\n\r\n    // 1. Récupérer les informations actuelles de l'utilisateur\r\n    const userQuery = 'SELECT * FROM utilisateurs WHERE id = ?';\r\n    const [user] = await client.query(userQuery, [user_id]);\r\n\r\n    if (!user || user.length === 0) {\r\n      return res.status(404).json({ success: false, message: 'Utilisateur non trouvé' });\r\n    }\r\n\r\n    // Initialiser userInfo avec les données actuelles de l'utilisateur\r\n    let userInfo = { ...user[0] }; // Utilisation de l'utilisateur actuel\r\n\r\n    // 2. Récupérer le nom du grade à partir de l'ID du grade\r\n    const gradeQuery = 'SELECT grade FROM grades WHERE id = ?';\r\n    const [gradeResults] = await client.query(gradeQuery, [userInfo.grade]);\r\n\r\n    if (gradeResults && gradeResults.length > 0) {\r\n      userInfo.grade = gradeResults[0].grade; // Ajouter le nom du grade\r\n    } else {\r\n      userInfo.grade = null; // Valeur par défaut si aucune correspondance\r\n    }\r\n\r\n    // 3. Récupérer le nom du genre à partir de l'ID du genre\r\n    const genreQuery = 'SELECT genre_name FROM genres WHERE id = ?';\r\n    const [genreResults] = await client.query(genreQuery, [userInfo.genre]);\r\n\r\n    if (genreResults && genreResults.length > 0) {\r\n      userInfo.gender = genreResults[0].genre_name; // Ajouter le nom du genre\r\n    } else {\r\n      userInfo.gender = null; // Valeur par défaut si aucune correspondance\r\n    }\r\n\r\n    // 4. Récupérer le type d'abonnement à partir de l'ID d'abonnement\r\n    const abonnementQuery = 'SELECT nom_plan FROM plans_tarifaires WHERE id = ?';\r\n    const [abonnementResults] = await client.query(abonnementQuery, [userInfo.abonnement]);\r\n\r\n    if (abonnementResults && abonnementResults.length > 0) {\r\n      userInfo.abonnement = abonnementResults[0].nom_plan; // Ajouter le nom du plan d'abonnement\r\n    } else {\r\n      userInfo.abonnement = null; // Valeur par défaut si aucune correspondance\r\n    }\r\n\r\n    // 5. Mettre à jour les informations de l'utilisateur avec les nouvelles données\r\n    const updateQuery = `\r\n      UPDATE utilisateurs \r\n      SET \r\n        first_name = ?, \r\n        last_name = ?, \r\n        email = ?, \r\n        gender = ?, \r\n        date_of_birth = ?,\r\n        status = ?,\r\n        grade = ?, \r\n        abonnement = ?\r\n      WHERE id = ?\r\n    `;\r\n    \r\n    const { first_name, last_name, email, genre, date_of_birth, role, grade, abonnement } = data;\r\n    console.log(first_name, last_name, email, genre, date_of_birth, role, grade, abonnement)\r\n    const result = await client.query(updateQuery, [\r\n      first_name, last_name, email, genre, date_of_birth, role, grade, abonnement, user_id\r\n    ]);\r\n\r\n    // 6. Vérifier si la mise à jour a réussi\r\n    if (result.affectedRows > 0) {\r\n      return res.status(200).json({ success: true, message: 'Informations mises à jour avec succès' });\r\n    } else {\r\n      return res.status(400).json({ success: false, message: 'Aucune donnée mise à jour' });\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de la mise à jour des informations:', error);\r\n    return res.status(500).json({ success: false, message: 'Erreur serveur' });\r\n  }\r\n});\r\n\r\n// Exemple avec SQL\r\nrouter.delete('/delete/:id', async (req, res) => {\r\n  const userId = req.params.id;\r\n\r\n  try {\r\n    const client = new SQLClient();\r\n\r\n    // 1. Vérifier si l'utilisateur existe dans la base de données\r\n    const userQuery = 'SELECT * FROM utilisateurs WHERE id = ?';\r\n    const [user] = await client.query(userQuery, [userId]);\r\n\r\n    if (!user || user.length === 0) {\r\n      return res.status(404).json({ success: false, message: 'Utilisateur non trouvé' });\r\n    }\r\n\r\n    // 2. Supprimer l'utilisateur de la base de données\r\n    const deleteQuery = 'DELETE FROM utilisateurs WHERE id = ?';\r\n    const result = await client.query(deleteQuery, [userId]);\r\n\r\n    // 3. Vérifier si la suppression a réussi\r\n    if (result.affectedRows > 0) {\r\n      return res.status(200).json({ success: true, message: 'Utilisateur supprimé avec succès' });\r\n    } else {\r\n      return res.status(400).json({ success: false, message: 'Aucune donnée supprimée' });\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de la suppression de l\\'utilisateur:', error);\r\n    return res.status(500).json({ success: false, message: 'Erreur serveur' });\r\n  }\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default router;"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../../"}