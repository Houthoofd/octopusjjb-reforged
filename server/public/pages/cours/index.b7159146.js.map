{"mappings":"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","sources":["<anon>","ui/src/pages/cours/index.ts"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequirec605\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequirec605\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $7WQrb = parcelRequire(\"7WQrb\");\n\nvar $5D1XK = parcelRequire(\"5D1XK\");\nparcelRequire(\"RKbfs\");\nparcelRequire(\"3I5Zu\");\nparcelRequire(\"dLLJA\");\nparcelRequire(\"7KTRf\");\n\nvar $keLaC = parcelRequire(\"keLaC\");\nclass $bf8412e7020956f2$export$385a47ca81c36504 extends (0, $5D1XK.WebComponent) {\n    connectedCallback() {\n        super.connectedCallback();\n        this.getRole();\n    }\n    checkUserConnection() {\n        const userDataString = localStorage.getItem(\"userData\");\n        if (!userDataString) {\n            // Si l'utilisateur n'est pas connecté, redirige vers la page de connexion\n            window.location.href = \"/pages/connexion\";\n            return false; // Retourne false pour indiquer qu'aucun utilisateur n'est connecté\n        }\n        return true; // Si l'utilisateur est connecté, retourne true\n    }\n    // Méthode pour récupérer le rôle et affecter isAdmin\n    getRole() {\n        // Vérifie d'abord si l'utilisateur est connecté\n        if (!this.checkUserConnection()) return; // Si l'utilisateur n'est pas connecté, on arrête l'exécution\n        const userDataString = localStorage.getItem(\"userData\");\n        const userData = JSON.parse(userDataString);\n        console.log(\"Donn\\xe9es utilisateur r\\xe9cup\\xe9r\\xe9es:\", userData);\n        // Récupère le rôle de l'utilisateur\n        const userRole = userData.role;\n        console.log(\"R\\xf4le de l'utilisateur:\", userRole);\n        // Vérifie si l'utilisateur a un rôle administrateur et met à jour isAdmin\n        if (userRole === \"administrator\" || userRole === \"super-administrator\") this.isAdmin = true;\n        else this.isAdmin = false;\n        console.log(\"Est-ce un administrateur ? \", this.isAdmin);\n    }\n    async register(cour) {\n        try {\n            const userDataString = localStorage.getItem(\"userData\");\n            if (!userDataString) throw new Error(\"Utilisateur non connect\\xe9. Aucune donn\\xe9e dans localStorage.\");\n            const userData = JSON.parse(userDataString);\n            console.log(\"Donn\\xe9es utilisateur r\\xe9cup\\xe9r\\xe9es:\", userData);\n            const inscriptionData = {\n                user: userData,\n                cours: cour\n            };\n            console.log(inscriptionData);\n            const response = await fetch(`${(0, $keLaC.url)}cours/inscription/`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                credentials: \"include\",\n                body: JSON.stringify(inscriptionData)\n            });\n            // Vérifier si la requête a réussi\n            if (!response.ok) throw new Error(\"Erreur serveur.\");\n            // Récupérer les données JSON de la réponse\n            const data = await response.json();\n            console.log(data);\n            // Vérifie si la réponse contient un message et gérer en conséquence\n            if (data) {\n                if (data.success_message) alert(data.success_message + \"au cour du \" + this.formatDateFromISO(cour.date_cours)) // Affiche le message du serveur\n                ;\n                if (data.info_message) alert(data.info_message);\n            } else console.log(\"R\\xe9ponse vide ou mal format\\xe9e.\");\n            if (response.status === 409) alert(data.info_message);\n        } catch (error) {\n            console.error(\"Erreur lors de la requ\\xeate fetch:\", error);\n            alert(\"vous \\xeates d\\xe9j\\xe0 inscrit \\xe0 ce cour\");\n            return [];\n        }\n    }\n    async preloadData() {\n        try {\n            const response = await fetch(`${(0, $keLaC.url)}cours/`, {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            if (!response.ok) throw new Error(\"Erreur serveur.\");\n            const data = await response.json();\n            return data.cours.length > 0 ? data : [];\n        } catch (error) {\n            console.error(\"Erreur lors de la requ\\xeate fetch:\", error);\n            return [];\n        }\n    }\n    async loadParticipants(courId) {\n        console.log(courId);\n        try {\n            const response = await fetch(`${(0, $keLaC.url)}cours/participant/`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                credentials: \"include\",\n                body: JSON.stringify({\n                    cour_id: courId\n                })\n            });\n            if (!response.ok) throw new Error(\"Erreur serveur.\");\n            const data = await response.json();\n            // Vérifier si la réponse contient des participants\n            return data.participants && data.participants.length > 0 ? data.participants : [];\n        } catch (error) {\n            console.error(\"Erreur lors de la requ\\xeate fetch:\", error);\n            return [];\n        }\n    }\n    async displayParticipants(cour) {\n        console.log(\"Cours ID:\", cour.id);\n        // Utiliser querySelector pour sélectionner le panel-row correspondant au cours cliqué\n        const panelRow = this.shadowRoot?.querySelector(`.panel-row[data-cours-id=\"${cour.id}\"]`);\n        console.log(panelRow);\n        if (panelRow) {\n            // Si panel-row est déjà active, la désactiver et ne rien faire de plus\n            if (panelRow.classList.contains(\"active\")) {\n                panelRow.classList.remove(\"active\");\n                console.log(\"Panel d\\xe9sactiv\\xe9.\");\n                return; // Sortir de la fonction car on ne veut pas recharger les participants\n            }\n            // Sinon, activer le panel\n            panelRow.classList.add(\"active\");\n            console.log(\"Panel activ\\xe9:\", panelRow);\n            // Vérifier si la div avec les participants existe déjà\n            let participantsDiv = panelRow.querySelector(\".new-participants\");\n            // Si la div existe déjà et a des participants, ne pas recharger les données\n            if (participantsDiv && participantsDiv.children.length > 0) {\n                console.log(\"Participants d\\xe9j\\xe0 charg\\xe9s. Aucun rechargement n\\xe9cessaire.\");\n                return;\n            }\n            // Si la div des participants n'existe pas, la créer\n            if (!participantsDiv) {\n                participantsDiv = document.createElement(\"div\");\n                participantsDiv.classList.add(\"new-participants\"); // Classe pour styliser la nouvelle div\n                panelRow.appendChild(participantsDiv); // Ajoute la div à la fin de panelRow\n            }\n            // Charger les participants depuis l'API\n            try {\n                const participants = await this.loadParticipants(cour.id);\n                // Vider la div des anciens participants\n                participantsDiv.innerHTML = \"\";\n                // Vérifier si l'objet participants est vide\n                if (Object.keys(participants).length === 0) participantsDiv.textContent = \"Aucun participant trouv\\xe9.\";\n                else {\n                    // Utiliser Object.values pour récupérer les participants\n                    const participantsArray = Object.values(participants);\n                    // Créer les éléments pour chaque participant\n                    participantsArray.forEach((participant)=>{\n                        const pillDiv = document.createElement(\"div\");\n                        pillDiv.classList.add(\"pill\");\n                        const firstNameDiv = document.createElement(\"div\");\n                        firstNameDiv.classList.add(\"first-name\");\n                        firstNameDiv.textContent = participant.first_name;\n                        const lastNameDiv = document.createElement(\"div\");\n                        lastNameDiv.classList.add(\"last-name\");\n                        lastNameDiv.textContent = participant.last_name;\n                        const iconCrossDiv = document.createElement(\"div\");\n                        iconCrossDiv.classList.add(\"icon-cross\");\n                        const crossIcon = document.createElement(\"div\");\n                        crossIcon.classList.add(\"icon\");\n                        crossIcon.innerHTML = `<pf-icons-times></pf-icons-times>`;\n                        iconCrossDiv.appendChild(crossIcon);\n                        // Attacher une fonction à l'événement \"click\" de l'icône \"cross\"\n                        iconCrossDiv.addEventListener(\"click\", async ()=>{\n                            try {\n                                // Effectue la requête POST pour supprimer le participant\n                                const response = await fetch(`${(0, $keLaC.url)}cours/participant/cancel/`, {\n                                    method: \"POST\",\n                                    headers: {\n                                        \"Content-Type\": \"application/json\"\n                                    },\n                                    body: JSON.stringify({\n                                        courId: cour.id,\n                                        participantId: participant.participant_id\n                                    })\n                                });\n                                // Vérifier si la réponse est ok (code 200-299)\n                                if (!response.ok) throw new Error(\"Erreur serveur : impossible de supprimer le participant.\");\n                                // Extraire les données JSON de la réponse\n                                const data = await response.json();\n                                // Vérifier si la suppression a été effectuée avec succès (basé sur la réponse du serveur)\n                                if (data.message) {\n                                    console.log(\"Participant supprim\\xe9 avec succ\\xe8s.\");\n                                    // Ici, tu peux mettre à jour l'interface utilisateur, comme retirer le participant de l'affichage\n                                    iconCrossDiv.parentElement.classList.toggle(\"invalide\"); // Par exemple, retirer la div contenant le participant\n                                } else console.error(\"Erreur lors de la suppression du participant :\", data.message);\n                            } catch (error) {\n                                console.error(\"Erreur lors de la requ\\xeate fetch :\", error);\n                            }\n                        });\n                        const iconValidateDiv = document.createElement(\"div\");\n                        iconValidateDiv.classList.add(\"icon-validate\");\n                        const checkIcon = document.createElement(\"div\");\n                        checkIcon.classList.add(\"icon\");\n                        checkIcon.innerHTML = `<pf-icons-check></pf-icons-check>`;\n                        iconValidateDiv.appendChild(checkIcon);\n                        // Attacher une fonction à l'événement \"click\" de l'icône \"check\"\n                        iconValidateDiv.addEventListener(\"click\", async ()=>{\n                            console.log(cour.id, participant.participant_id);\n                            try {\n                                // Effectuer la requête POST pour supprimer le participant\n                                const response = await fetch(`${(0, $keLaC.url)}cours/participant/validation/`, {\n                                    method: \"POST\",\n                                    headers: {\n                                        \"Content-Type\": \"application/json\"\n                                    },\n                                    body: JSON.stringify({\n                                        courId: cour.id,\n                                        participantId: participant.participant_id\n                                    })\n                                });\n                                // Vérifier si la réponse est ok (code 200-299)\n                                if (!response.ok) throw new Error(\"Erreur serveur : impossible de valider le participant.\");\n                                // Extraire les données JSON de la réponse\n                                const data = await response.json();\n                                // Vérifier si la suppression a été effectuée avec succès (basé sur la réponse du serveur)\n                                if (data.message) {\n                                    console.log(\"Participant valid\\xe9 avec succ\\xe8s.\");\n                                    // Ici, tu peux mettre à jour l'interface utilisateur, comme retirer le participant de l'affichage\n                                    iconCrossDiv.parentElement.classList.toggle(\"valide\");\n                                } else console.error(\"Erreur lors de la suppression du participant :\", data.message);\n                            } catch (error) {\n                                console.error(\"Erreur lors de la requ\\xeate fetch :\", error);\n                            }\n                        });\n                        // Ajouter les éléments dans pillDiv\n                        pillDiv.appendChild(firstNameDiv);\n                        pillDiv.appendChild(lastNameDiv);\n                        pillDiv.appendChild(iconCrossDiv);\n                        pillDiv.appendChild(iconValidateDiv);\n                        // Ajouter le pillDiv dans la div des participants\n                        participantsDiv.appendChild(pillDiv);\n                    });\n                }\n            } catch (error) {\n                console.error(\"Erreur lors du chargement des participants:\", error);\n                participantsDiv.textContent = \"Erreur lors du chargement des participants.\";\n            }\n            console.log(\"Participants ajout\\xe9s dans la div:\", participantsDiv);\n        } else console.error('Aucun \\xe9l\\xe9ment \"panel-row\" trouv\\xe9 pour ce cours.');\n    }\n    formatDateFromISO(isoDateString) {\n        const date = new Date(isoDateString);\n        const year = date.getFullYear();\n        const month = String(date.getMonth() + 1).padStart(2, \"0\");\n        const day = String(date.getDate()).padStart(2, \"0\");\n        return `${year}-${month}-${day}`;\n    }\n    convertToISODate(dateString) {\n        const [year, month, day] = dateString.split(\"-\");\n        return new Date(`${year}-${month}-${day}T00:00:00Z`).toISOString();\n    }\n    constructor(...args){\n        super(...args);\n        this.data = [];\n        this.isAdmin = null;\n    }\n}\n(0, $7WQrb.__decorate)([\n    (0, $5D1XK.state)()\n], $bf8412e7020956f2$export$385a47ca81c36504.prototype, \"isAdmin\", void 0);\n$bf8412e7020956f2$export$385a47ca81c36504 = (0, $7WQrb.__decorate)([\n    (0, $5D1XK.customElement)({\n        name: \"page-cours\",\n        template: (0, $5D1XK.html)`${(cours)=>{\n            return (0, $5D1XK.html)`\r\n        <pf-page\r\n          masterhead-no-icon\r\n          masterhead-no-branding\r\n          drawer-inline\r\n          drawer-expanded\r\n          drawer-static\r\n          drawer-panel-left\r\n        >\r\n          <div slot=\"drawer-panel\">\r\n            <navigation-panel></navigation-panel>\r\n          </div>\r\n          <pf-panel header scrollable>\r\n            <div slot=\"header\">\r\n              <h1 class=\"title\">Cours</h1>\r\n            </div>\r\n            <div class=\"table-infos\">\r\n              ${(0, $5D1XK.asyncAppend)(cours.preloadData(), (result)=>{\n                return (0, $5D1XK.html)`\r\n                    ${(0, $5D1XK.repeat)(result.cours, (0, $5D1XK.html)`${(cour)=>{\n                    console.log(cour);\n                    return (0, $5D1XK.html)`\r\n                          <div class=\"panel-row\" data-cours-id=\"${cour.id}\">\r\n                            <div class=\"row\">\r\n                              <div class=\"type-de-cours\">${cour.type_cours}</div>\r\n                              <div class=\"date\">${cours.formatDateFromISO(cour.date_cours)}</div>\r\n                              <div class=\"heure-debut\">${cour.heure_debut}</div>\r\n                              <div class=\"heure-fin\">${cour.heure_fin}</div>\r\n                              <pf-button @click=\"${()=>cours.register(cour)}\">Réservez</pf-button>\r\n                              ${cours.isAdmin === true ? (0, $5D1XK.html)`<div @click=\"${(cour)=>cours.displayParticipants(cour)}\" class='icon-down'><div class='icon'><pf-icons-chevron-down></pf-icons-chevron-down></div></div>` : (0, $5D1XK.html)``}\r\n                            </div>\r\n                          </div>`;\n                }}`)}`;\n            })}\r\n            </div>\r\n          </pf-panel>\r\n          <pf-avatar></pf-avatar>\r\n        </pf-page>`;\n        }}`,\n        styles: [\n            (0, $5D1XK.css)`\r\n        .title{\r\n          color: black;\r\n        }\r\n        .table-infos {\r\n          color: black;\r\n          display: flex;\r\n          gap: 20px;\r\n          flex-direction: column;\r\n        }\r\n        .navigation {\r\n          color: black;\r\n        }\r\n        .row{\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: space-between;\r\n          padding: 10px 10px;\r\n          background-color: #9e9e9e26;\r\n        }\r\n        .icon-down{\r\n          cursor: pointer;\r\n          background-color: #9E9E9E;\r\n          width: 24px;\r\n          height: 24px;\r\n          border-radius: 3px;\r\n        }\r\n        .icon{\r\n          transform: translate(4px, 4px);\r\n        }\r\n        .participants{\r\n          display: flex;\r\n          gap: 15px;\r\n          margin-top: 10px;\r\n        }\r\n        .pill{\r\n          display: flex;\r\n          justify-content: space-between;\r\n          background-color: #9e9e9e0f;\r\n          width: 200px;\r\n          padding: 10px 10px;\r\n          border-radius: 10px;\r\n        }\r\n        .pill.valide{\r\n          background-color: green;\r\n        }\r\n        .pill.invalide{\r\n          background-color: red;\r\n        }\r\n        .pill > .icon-cross{\r\n          cursor: pointer;\r\n          background-color: #f9f9f9;\r\n          width: 24px;\r\n          height: 24px;\r\n          border-radius: 3px;\r\n        }\r\n        .pill > .icon-validate{\r\n          cursor: pointer;\r\n          background-color: #f9f9f9;\r\n          width: 24px;\r\n          height: 24px;\r\n          border-radius: 3px;\r\n        }\r\n        .pill > .icon-cross > .icon{\r\n          transform: translate(4px, 4px);\r\n          color: #9e9e9eab;\r\n        }\r\n        .pill > .icon-validate > .icon{\r\n          transform: translate(4px, 4px);\r\n          color: #9e9e9eab;\r\n        }\r\n        .panel-row .new-participants {\r\n          display: none; /* Cacher la div par défaut */\r\n        }\r\n\r\n        .panel-row.active .new-participants {\r\n          display: block; /* Afficher la div quand panel-row est active */\r\n        }\r\n      `\n        ]\n    })\n], $bf8412e7020956f2$export$385a47ca81c36504);\nlet $bf8412e7020956f2$var$template = (0, $5D1XK.html)`${(context)=>{\n    return (0, $5D1XK.html)`<page-cours></page-cours>`;\n}}`;\n(0, $5D1XK.render)($bf8412e7020956f2$var$template);\n\n\n//# sourceMappingURL=index.b7159146.js.map\n","import { html , render , WebComponent , customElement , attr , attrState , state, css, ViewTemplate, ViewContext, asyncAppend, repeat, children } from '@lithium-framework/core';\r\nimport '@lithium-framework/router-element';\r\nimport 'unofficial-pf-v5-wc';\r\nimport 'unofficial-pf-v5-wc-icons';\r\nimport '../../components';\r\nimport {url} from '../../../../url';\r\n\r\n@customElement({\r\n    name: 'page-cours',\r\n    template: html`${(cours: Cours) => {\r\n      return html`\r\n        <pf-page\r\n          masterhead-no-icon\r\n          masterhead-no-branding\r\n          drawer-inline\r\n          drawer-expanded\r\n          drawer-static\r\n          drawer-panel-left\r\n        >\r\n          <div slot=\"drawer-panel\">\r\n            <navigation-panel></navigation-panel>\r\n          </div>\r\n          <pf-panel header scrollable>\r\n            <div slot=\"header\">\r\n              <h1 class=\"title\">Cours</h1>\r\n            </div>\r\n            <div class=\"table-infos\">\r\n              ${asyncAppend(cours.preloadData(), (result) => {\r\n                return html`\r\n                    ${repeat(\r\n                      result.cours,\r\n                      html`${(cour) => {\r\n                        console.log(cour)\r\n                        return html`\r\n                          <div class=\"panel-row\" data-cours-id=\"${cour.id}\">\r\n                            <div class=\"row\">\r\n                              <div class=\"type-de-cours\">${cour.type_cours}</div>\r\n                              <div class=\"date\">${cours.formatDateFromISO(cour.date_cours)}</div>\r\n                              <div class=\"heure-debut\">${cour.heure_debut}</div>\r\n                              <div class=\"heure-fin\">${cour.heure_fin}</div>\r\n                              <pf-button @click=\"${() => cours.register(cour)}\">Réservez</pf-button>\r\n                              ${cours.isAdmin === true ? html`<div @click=\"${(cour) => cours.displayParticipants(cour)}\" class='icon-down'><div class='icon'><pf-icons-chevron-down></pf-icons-chevron-down></div></div>` : html``}\r\n                            </div>\r\n                          </div>`\r\n                      }}`\r\n                    )}`\r\n              })}\r\n            </div>\r\n          </pf-panel>\r\n          <pf-avatar></pf-avatar>\r\n        </pf-page>`;\r\n    }}`,\r\n    styles: [\r\n      css`\r\n        .title{\r\n          color: black;\r\n        }\r\n        .table-infos {\r\n          color: black;\r\n          display: flex;\r\n          gap: 20px;\r\n          flex-direction: column;\r\n        }\r\n        .navigation {\r\n          color: black;\r\n        }\r\n        .row{\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: space-between;\r\n          padding: 10px 10px;\r\n          background-color: #9e9e9e26;\r\n        }\r\n        .icon-down{\r\n          cursor: pointer;\r\n          background-color: #9E9E9E;\r\n          width: 24px;\r\n          height: 24px;\r\n          border-radius: 3px;\r\n        }\r\n        .icon{\r\n          transform: translate(4px, 4px);\r\n        }\r\n        .participants{\r\n          display: flex;\r\n          gap: 15px;\r\n          margin-top: 10px;\r\n        }\r\n        .pill{\r\n          display: flex;\r\n          justify-content: space-between;\r\n          background-color: #9e9e9e0f;\r\n          width: 200px;\r\n          padding: 10px 10px;\r\n          border-radius: 10px;\r\n        }\r\n        .pill.valide{\r\n          background-color: green;\r\n        }\r\n        .pill.invalide{\r\n          background-color: red;\r\n        }\r\n        .pill > .icon-cross{\r\n          cursor: pointer;\r\n          background-color: #f9f9f9;\r\n          width: 24px;\r\n          height: 24px;\r\n          border-radius: 3px;\r\n        }\r\n        .pill > .icon-validate{\r\n          cursor: pointer;\r\n          background-color: #f9f9f9;\r\n          width: 24px;\r\n          height: 24px;\r\n          border-radius: 3px;\r\n        }\r\n        .pill > .icon-cross > .icon{\r\n          transform: translate(4px, 4px);\r\n          color: #9e9e9eab;\r\n        }\r\n        .pill > .icon-validate > .icon{\r\n          transform: translate(4px, 4px);\r\n          color: #9e9e9eab;\r\n        }\r\n        .panel-row .new-participants {\r\n          display: none; /* Cacher la div par défaut */\r\n        }\r\n\r\n        .panel-row.active .new-participants {\r\n          display: block; /* Afficher la div quand panel-row est active */\r\n        }\r\n      `,\r\n    ],\r\n  })\r\n  \r\n\r\nexport class Cours extends WebComponent {\r\n  data: any[] = [];\r\n\r\n  @state() isAdmin: boolean = null;\r\n\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n    this.getRole();\r\n  }\r\n\r\n  checkUserConnection() {\r\n    const userDataString = localStorage.getItem('userData');\r\n    if (!userDataString) {\r\n        // Si l'utilisateur n'est pas connecté, redirige vers la page de connexion\r\n        window.location.href = '/pages/connexion';\r\n        return false; // Retourne false pour indiquer qu'aucun utilisateur n'est connecté\r\n    }\r\n    return true; // Si l'utilisateur est connecté, retourne true\r\n  }\r\n\r\n  // Méthode pour récupérer le rôle et affecter isAdmin\r\n  getRole() {\r\n    // Vérifie d'abord si l'utilisateur est connecté\r\n    if (!this.checkUserConnection()) {\r\n        return; // Si l'utilisateur n'est pas connecté, on arrête l'exécution\r\n    }\r\n\r\n    const userDataString = localStorage.getItem('userData');\r\n    const userData = JSON.parse(userDataString);\r\n    console.log('Données utilisateur récupérées:', userData);\r\n\r\n    // Récupère le rôle de l'utilisateur\r\n    const userRole = userData.role;\r\n    console.log('Rôle de l\\'utilisateur:', userRole);\r\n\r\n    // Vérifie si l'utilisateur a un rôle administrateur et met à jour isAdmin\r\n    if (userRole === 'administrator' || userRole === 'super-administrator') {\r\n        this.isAdmin = true;\r\n    } else {\r\n        this.isAdmin = false;\r\n    }\r\n\r\n    console.log('Est-ce un administrateur ? ', this.isAdmin);\r\n  }\r\n\r\n\r\n  async register(cour) {\r\n    try {\r\n        const userDataString = localStorage.getItem('userData');\r\n        if (!userDataString) {\r\n            throw new Error('Utilisateur non connecté. Aucune donnée dans localStorage.');\r\n        }\r\n\r\n        const userData = JSON.parse(userDataString);\r\n        console.log('Données utilisateur récupérées:', userData);\r\n\r\n        const inscriptionData = {\r\n            user: userData, \r\n            cours: cour\r\n        };\r\n        console.log(inscriptionData);\r\n\r\n        // Faire la requête fetch\r\n        `${url}cours/inscription/`\r\n        const response = await fetch(`${url}cours/inscription/`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            credentials: 'include',\r\n            body: JSON.stringify(inscriptionData)\r\n        });\r\n\r\n        // Vérifier si la requête a réussi\r\n        if (!response.ok) {\r\n            throw new Error('Erreur serveur.');\r\n        }\r\n\r\n        // Récupérer les données JSON de la réponse\r\n        const data = await response.json();\r\n        console.log(data);\r\n\r\n        // Vérifie si la réponse contient un message et gérer en conséquence\r\n        if (data) {\r\n\r\n            if (data.success_message) {\r\n              alert(data.success_message + \"au cour du \" + this.formatDateFromISO(cour.date_cours))  // Affiche le message du serveur\r\n            }\r\n            if (data.info_message) {\r\n              alert(data.info_message)\r\n            }\r\n        } else {\r\n            console.log(\"Réponse vide ou mal formatée.\");\r\n        }\r\n      if(response.status === 409){\r\n        alert(data.info_message);\r\n      }\r\n\r\n    } catch (error) {\r\n        console.error('Erreur lors de la requête fetch:', error);\r\n        alert(\"vous êtes déjà inscrit à ce cour\");\r\n        return [];\r\n    }\r\n  }\r\n\r\n\r\n    async preloadData(): Promise<any[]> {\r\n        try {\r\n            const response = await fetch(`${url}cours/`, {\r\n                method: 'GET',\r\n                headers: { 'Content-Type': 'application/json' },\r\n            });\r\n        \r\n            if (!response.ok) {\r\n                throw new Error('Erreur serveur.');\r\n            }\r\n        \r\n            const data = await response.json();\r\n            return data.cours.length > 0 ? data : [];\r\n        } catch (error) {\r\n            console.error('Erreur lors de la requête fetch:', error);\r\n            return [];\r\n        }\r\n    }\r\n  \r\n\r\n  async loadParticipants(courId) {\r\n    console.log(courId);\r\n    try {\r\n        const response = await fetch(`${url}cours/participant/`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            credentials: 'include',\r\n            body: JSON.stringify({ cour_id: courId })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Erreur serveur.');\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        // Vérifier si la réponse contient des participants\r\n        return data.participants && data.participants.length > 0 ? data.participants : [];\r\n    } catch (error) {\r\n        console.error('Erreur lors de la requête fetch:', error);\r\n        return [];\r\n    }\r\n  }\r\n\r\n\r\n  \r\n\r\n  async displayParticipants(cour) {\r\n    console.log(\"Cours ID:\", cour.id);\r\n  \r\n    // Utiliser querySelector pour sélectionner le panel-row correspondant au cours cliqué\r\n    const panelRow = this.shadowRoot?.querySelector(`.panel-row[data-cours-id=\"${cour.id}\"]`);\r\n    console.log(panelRow);\r\n  \r\n    if (panelRow) {\r\n      // Si panel-row est déjà active, la désactiver et ne rien faire de plus\r\n      if (panelRow.classList.contains('active')) {\r\n        panelRow.classList.remove('active');\r\n        console.log('Panel désactivé.');\r\n        return; // Sortir de la fonction car on ne veut pas recharger les participants\r\n      }\r\n  \r\n      // Sinon, activer le panel\r\n      panelRow.classList.add('active');\r\n      console.log('Panel activé:', panelRow);\r\n  \r\n      // Vérifier si la div avec les participants existe déjà\r\n      let participantsDiv = panelRow.querySelector('.new-participants');\r\n  \r\n      // Si la div existe déjà et a des participants, ne pas recharger les données\r\n      if (participantsDiv && participantsDiv.children.length > 0) {\r\n        console.log('Participants déjà chargés. Aucun rechargement nécessaire.');\r\n        return;\r\n      }\r\n  \r\n      // Si la div des participants n'existe pas, la créer\r\n      if (!participantsDiv) {\r\n        participantsDiv = document.createElement('div');\r\n        participantsDiv.classList.add('new-participants'); // Classe pour styliser la nouvelle div\r\n        panelRow.appendChild(participantsDiv); // Ajoute la div à la fin de panelRow\r\n      }\r\n  \r\n      // Charger les participants depuis l'API\r\n      try {\r\n        const participants = await this.loadParticipants(cour.id);\r\n  \r\n        // Vider la div des anciens participants\r\n        participantsDiv.innerHTML = '';\r\n  \r\n        // Vérifier si l'objet participants est vide\r\n        if (Object.keys(participants).length === 0) {\r\n          participantsDiv.textContent = 'Aucun participant trouvé.';\r\n        } else {\r\n          // Utiliser Object.values pour récupérer les participants\r\n          const participantsArray = Object.values(participants);\r\n  \r\n          // Créer les éléments pour chaque participant\r\n          participantsArray.forEach(participant => {\r\n            const pillDiv = document.createElement('div');\r\n            pillDiv.classList.add('pill');\r\n  \r\n            const firstNameDiv = document.createElement('div');\r\n            firstNameDiv.classList.add('first-name');\r\n            firstNameDiv.textContent = participant.first_name;\r\n  \r\n            const lastNameDiv = document.createElement('div');\r\n            lastNameDiv.classList.add('last-name');\r\n            lastNameDiv.textContent = participant.last_name;\r\n  \r\n            const iconCrossDiv = document.createElement('div');\r\n            iconCrossDiv.classList.add('icon-cross');\r\n            const crossIcon = document.createElement('div');\r\n            crossIcon.classList.add('icon');\r\n            crossIcon.innerHTML = `<pf-icons-times></pf-icons-times>`;\r\n            iconCrossDiv.appendChild(crossIcon);\r\n\r\n            // Attacher une fonction à l'événement \"click\" de l'icône \"cross\"\r\n            iconCrossDiv.addEventListener('click', async () => {\r\n              try {\r\n                // Effectue la requête POST pour supprimer le participant\r\n                const response = await fetch(`${url}cours/participant/cancel/`, {\r\n                  method: 'POST',\r\n                  headers: { 'Content-Type': 'application/json' },\r\n                  body: JSON.stringify({\r\n                    courId: cour.id,      // L'ID du cours\r\n                    participantId: participant.participant_id\r\n                  })\r\n                });\r\n            \r\n                // Vérifier si la réponse est ok (code 200-299)\r\n                if (!response.ok) {\r\n                  throw new Error('Erreur serveur : impossible de supprimer le participant.');\r\n                }\r\n            \r\n                // Extraire les données JSON de la réponse\r\n                const data = await response.json();\r\n            \r\n                // Vérifier si la suppression a été effectuée avec succès (basé sur la réponse du serveur)\r\n                if (data.message) {\r\n                  console.log('Participant supprimé avec succès.');\r\n                  \r\n                  // Ici, tu peux mettre à jour l'interface utilisateur, comme retirer le participant de l'affichage\r\n                  iconCrossDiv.parentElement.classList.toggle(\"invalide\"); // Par exemple, retirer la div contenant le participant\r\n                } else {\r\n                  console.error('Erreur lors de la suppression du participant :', data.message);\r\n                }\r\n            \r\n              } catch (error) {\r\n                console.error('Erreur lors de la requête fetch :', error);\r\n              }\r\n            });\r\n            \r\n\r\n  \r\n            const iconValidateDiv = document.createElement('div');\r\n            iconValidateDiv.classList.add('icon-validate');\r\n            const checkIcon = document.createElement('div');\r\n            checkIcon.classList.add('icon');\r\n            checkIcon.innerHTML = `<pf-icons-check></pf-icons-check>`;\r\n            iconValidateDiv.appendChild(checkIcon);\r\n\r\n            // Attacher une fonction à l'événement \"click\" de l'icône \"check\"\r\n            iconValidateDiv.addEventListener('click', async () => {\r\n              console.log(cour.id,participant.participant_id)\r\n              try {\r\n                // Effectuer la requête POST pour supprimer le participant\r\n                const response = await fetch(`${url}cours/participant/validation/`, {\r\n                  method: 'POST',\r\n                  headers: { 'Content-Type': 'application/json' },\r\n                  body: JSON.stringify({\r\n                    courId: cour.id,      // L'ID du cours\r\n                    participantId: participant.participant_id\r\n                  })\r\n                });\r\n            \r\n                // Vérifier si la réponse est ok (code 200-299)\r\n                if (!response.ok) {\r\n                  throw new Error('Erreur serveur : impossible de valider le participant.');\r\n                }\r\n            \r\n                // Extraire les données JSON de la réponse\r\n                const data = await response.json();\r\n            \r\n                // Vérifier si la suppression a été effectuée avec succès (basé sur la réponse du serveur)\r\n                if (data.message) {\r\n                  console.log('Participant validé avec succès.');\r\n                  \r\n                  // Ici, tu peux mettre à jour l'interface utilisateur, comme retirer le participant de l'affichage\r\n                  iconCrossDiv.parentElement.classList.toggle(\"valide\");\r\n                } else {\r\n                  console.error('Erreur lors de la suppression du participant :', data.message);\r\n                }\r\n            \r\n              } catch (error) {\r\n                console.error('Erreur lors de la requête fetch :', error);\r\n              }\r\n            });\r\n  \r\n            // Ajouter les éléments dans pillDiv\r\n            pillDiv.appendChild(firstNameDiv);\r\n            pillDiv.appendChild(lastNameDiv);\r\n            pillDiv.appendChild(iconCrossDiv);\r\n            pillDiv.appendChild(iconValidateDiv);\r\n  \r\n            // Ajouter le pillDiv dans la div des participants\r\n            participantsDiv.appendChild(pillDiv);\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error('Erreur lors du chargement des participants:', error);\r\n        participantsDiv.textContent = 'Erreur lors du chargement des participants.';\r\n      }\r\n  \r\n      console.log('Participants ajoutés dans la div:', participantsDiv);\r\n    } else {\r\n      console.error('Aucun élément \"panel-row\" trouvé pour ce cours.');\r\n    }\r\n  }\r\n  \r\n  \r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n  \r\n\r\n\r\n  formatDateFromISO(isoDateString: string): string {\r\n    const date = new Date(isoDateString);\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    return `${year}-${month}-${day}`;\r\n  }\r\n\r\n  convertToISODate(dateString: string): string {\r\n    const [year, month, day] = dateString.split('-');\r\n    return new Date(`${year}-${month}-${day}T00:00:00Z`).toISOString();\r\n  }\r\n  \r\n}\r\n\r\n\r\nlet template: ViewTemplate<any> = html`${( context:ViewContext )=>{\r\n\r\n\r\n  return html`<page-cours></page-cours>`;\r\n\r\n}}`\r\n\r\n\r\n\r\nrender(template);"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$7WQrb","$5D1XK","$keLaC","$bf8412e7020956f2$export$385a47ca81c36504","WebComponent","connectedCallback","getRole","checkUserConnection","localStorage","getItem","window","location","href","userData","JSON","parse","console","log","userRole","role","isAdmin","cour","userDataString","inscriptionData","user","cours","response","fetch","url","method","headers","credentials","body","stringify","ok","data","json","success_message","alert","formatDateFromISO","date_cours","info_message","status","error","preloadData","length","loadParticipants","courId","cour_id","participants","displayParticipants","panelRow","shadowRoot","querySelector","classList","contains","remove","add","participantsDiv","children","document","createElement","appendChild","innerHTML","Object","keys","textContent","participantsArray","values","forEach","participant","pillDiv","firstNameDiv","first_name","lastNameDiv","last_name","iconCrossDiv","crossIcon","addEventListener","participantId","participant_id","message","parentElement","toggle","iconValidateDiv","checkIcon","isoDateString","date","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","convertToISODate","dateString","split","toISOString","constructor","args","__decorate","state","prototype","customElement","name","template","html","asyncAppend","result","repeat","type_cours","heure_debut","heure_fin","styles","css","$bf8412e7020956f2$var$template","context","render"],"version":3,"file":"index.b7159146.js.map"}