{"mappings":"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","sources":["<anon>","ui/src/pages/compte/index.ts"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequirec605\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequirec605\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $7WQrb = parcelRequire(\"7WQrb\");\n\nvar $5D1XK = parcelRequire(\"5D1XK\");\nparcelRequire(\"RKbfs\");\nparcelRequire(\"3I5Zu\");\nparcelRequire(\"dLLJA\");\nparcelRequire(\"7KTRf\");\n\nvar $keLaC = parcelRequire(\"keLaC\");\nclass $d6167d91fef9b220$export$f12240e0b836973a extends (0, $5D1XK.WebComponent) {\n    connectedCallback() {\n        super.connectedCallback();\n        this.getRole();\n    }\n    checkUserConnection() {\n        const userDataString = localStorage.getItem(\"userData\");\n        if (!userDataString) {\n            // Si l'utilisateur n'est pas connecté, redirige vers la page de connexion\n            window.location.href = \"/pages/connexion\";\n            return false; // Retourne false pour indiquer qu'aucun utilisateur n'est connecté\n        }\n        return true; // Si l'utilisateur est connecté, retourne true\n    }\n    // Méthode pour récupérer le rôle et affecter isAdmin\n    getRole() {\n        // Vérifie d'abord si l'utilisateur est connecté\n        if (!this.checkUserConnection()) return; // Si l'utilisateur n'est pas connecté, on arrête l'exécution\n        const userDataString = localStorage.getItem(\"userData\");\n        const userData = JSON.parse(userDataString);\n        console.log(\"Donn\\xe9es utilisateur r\\xe9cup\\xe9r\\xe9es:\", userData);\n        // Récupère le rôle de l'utilisateur\n        const userRole = userData.role;\n        console.log(\"R\\xf4le de l'utilisateur:\", userRole);\n        // Vérifie si l'utilisateur a un rôle administrateur et met à jour isAdmin\n        if (userRole === \"administrator\" || userRole === \"super-administrator\") this.isAdmin = true;\n        else this.isAdmin = false;\n        console.log(\"Est-ce un administrateur ? \", this.isAdmin);\n    }\n    async preloadData(url) {\n        try {\n            const userDataString = localStorage.getItem(\"userData\");\n            if (!userDataString) throw new Error(\"Utilisateur non connect\\xe9. Aucune donn\\xe9e dans localStorage.\");\n            const userData = JSON.parse(userDataString);\n            console.log(\"Donn\\xe9es utilisateur r\\xe9cup\\xe9r\\xe9es:\", userData);\n            const response = await fetch(`http://ec2-18-185-136-232.eu-central-1.compute.amazonaws.com:3000/informations`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(userData)\n            });\n            if (!response.ok) throw new Error(\"Erreur serveur.\");\n            const data = await response.json();\n            // Enveloppe l'objet dans un tableau\n            const dataArray = [\n                data\n            ]; // Si `data` est un objet, on le met directement dans un tableau\n            console.log(\"Donn\\xe9es mises dans un tableau:\", dataArray, dataArray.length);\n            return dataArray.length > 0 ? dataArray : []; // Retourne le tableau, ou un tableau vide si aucun élément\n        } catch (error) {\n            console.error(\"Erreur lors de la requ\\xeate fetch:\", error);\n            return [];\n        }\n    }\n    async preloadDataDropDown(url) {\n        try {\n            const response = await fetch(url, {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            if (!response.ok) throw new Error(\"Erreur serveur.\");\n            const data = await response.json();\n            console.log(data, data.length);\n            return data.length > 0 ? data : []; // Retourne le tableau, ou un tableau vide si aucun élément\n        } catch (error) {\n            console.error(\"Erreur lors de la requ\\xeate fetch:\", error);\n            return [];\n        }\n    }\n    enableEditing(compte) {\n        console.log(\"Enable editing\");\n        // Rendre les champs éditables dans le Shadow DOM\n        this.shadowRoot.getElementById(\"first_name\").removeAttribute(\"readonly\");\n        this.shadowRoot.getElementById(\"last_name\").removeAttribute(\"readonly\");\n        this.shadowRoot.getElementById(\"email\").removeAttribute(\"readonly\");\n        // Modifier l'affichage des boutons\n        this.shadowRoot.getElementById(\"edit-button\").style.display = \"none\";\n        this.shadowRoot.getElementById(\"save-button\").style.display = \"inline-block\";\n        // Retourner un message pour informer l'utilisateur qu'il peut éditer\n        return (0, $5D1XK.html)`<div>Vous pouvez modifier désormais</div>`;\n    }\n    validateForm() {\n        // Récupérer les valeurs des champs dans le Shadow DOM\n        let email = this.shadowRoot?.getElementById(\"email\").value;\n        let firstName = this.shadowRoot?.getElementById(\"first_name\").value;\n        let lastName = this.shadowRoot?.getElementById(\"last_name\").value;\n        // Expression régulière pour valider un email\n        let regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        // Vérifier si l'email est valide\n        if (!regex.test(email)) {\n            alert(\"Veuillez entrer un email valide\");\n            return false;\n        }\n        // Vérifier si les champs nécessaires ne sont pas vides\n        if (!firstName || !lastName) {\n            alert(\"Tous les champs doivent \\xeatre remplis\");\n            return false;\n        }\n        // Si toutes les conditions sont validées, permettre l'enregistrement\n        return true;\n    }\n    async saveChanges() {\n        // Valider les données avant d'enregistrer\n        if (this.validateForm()) {\n            // Récupérer les nouvelles valeurs\n            let email = this.shadowRoot?.getElementById(\"email\").value;\n            let firstName = this.shadowRoot?.getElementById(\"first_name\").value;\n            let lastName = this.shadowRoot?.getElementById(\"last_name\").value;\n            // Récupérer les données actuelles depuis le localStorage\n            let currentUserData = localStorage.getItem(\"userData\");\n            let current = currentUserData ? JSON.parse(currentUserData) : {};\n            // Préparer les nouvelles données à envoyer\n            let data = {\n                new_email: email,\n                new_first_name: firstName,\n                new_last_name: lastName,\n                current_mail: current.email,\n                current_first_name: current.prenom,\n                current_last_name: current.nom // Utiliser les données actuelles\n            };\n            // Envoie les données à l'API via fetch\n            fetch(`${(0, $keLaC.url)}users/update/`, {\n                method: \"PATCH\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(data)\n            }).then((response)=>response.json()).then((result)=>{\n                if (result.success) {\n                    // Si l'enregistrement a réussi\n                    alert(\"Modifications enregistr\\xe9es avec succ\\xe8s\");\n                    // Mettre à jour le localStorage avec les nouvelles informations utilisateur\n                    localStorage.setItem(\"userData\", JSON.stringify(result.data));\n                } else // Si l'enregistrement échoue\n                alert(\"Erreur lors de l'enregistrement\");\n            }).catch((error)=>{\n                // Si une erreur se produit lors de l'appel à l'API\n                console.error(\"Erreur:\", error);\n                alert(\"Une erreur s'est produite lors de la tentative d'enregistrement\");\n            });\n            // Revenir aux états non modifiables après l'enregistrement\n            this.shadowRoot.getElementById(\"first_name\").setAttribute(\"readonly\", \"true\");\n            this.shadowRoot.getElementById(\"last_name\").setAttribute(\"readonly\", \"true\");\n            this.shadowRoot.getElementById(\"email\").setAttribute(\"readonly\", \"true\");\n            // Masquer le bouton d'enregistrement et revenir au bouton \"Modifier\"\n            this.shadowRoot.getElementById(\"save-button\").style.display = \"none\";\n            this.shadowRoot.getElementById(\"edit-button\").style.display = \"inline-block\";\n        }\n    }\n    formatDateFromISO(isoDateString) {\n        const date = new Date(isoDateString);\n        const year = date.getFullYear();\n        const month = String(date.getMonth() + 1).padStart(2, \"0\");\n        const day = String(date.getDate()).padStart(2, \"0\");\n        return `${year}-${month}-${day}`;\n    }\n    convertToISODate(dateString) {\n        const [year, month, day] = dateString.split(\"-\");\n        return new Date(`${year}-${month}-${day}T00:00:00Z`).toISOString();\n    }\n    constructor(...args){\n        super(...args);\n        this.data = [];\n        this.nom = \"\";\n        this.prenom = \"\";\n        this.mail = \"\";\n        this.isAdmin = null;\n    }\n}\n(0, $7WQrb.__decorate)([\n    (0, $5D1XK.state)()\n], $d6167d91fef9b220$export$f12240e0b836973a.prototype, \"isAdmin\", void 0);\n$d6167d91fef9b220$export$f12240e0b836973a = (0, $7WQrb.__decorate)([\n    (0, $5D1XK.customElement)({\n        name: \"page-compte\",\n        template: (0, $5D1XK.html)`${(compte)=>{\n            return (0, $5D1XK.html)`\r\n      <pf-page masterhead-no-icon masterhead-no-branding drawer-inline drawer-expanded drawer-static drawer-panel-left>\r\n          <div slot = \"drawer-panel\">\r\n            <navigation-panel></navigation-panel>\r\n          </div>\r\n          <pf-panel header scrollable>\r\n            <div slot=\"header\">\r\n              <h1 class=\"title\">Compte</h1>\r\n            </div>\r\n            <div class=\"table-infos\">\r\n              ${(0, $5D1XK.asyncAppend)(compte.preloadData(`${(0, $keLaC.url)}informations/`), (result)=>{\n                return (0, $5D1XK.html)`${(0, $5D1XK.repeat)(result, (0, $5D1XK.html)`${(info)=>{\n                    console.log(info);\n                    return (0, $5D1XK.html)`\r\n                          <div class=\"row\">\r\n                            <div class=\"date-of-birth\">\r\n                              <label for=\"date_of_birth\">Date de naissance:</label>\r\n                              <input type=\"text\" id=\"date_of_birth\" value=\"${compte.formatDateFromISO(info.date_of_birth)}\" readonly disabled/>\r\n                            </div>\r\n\r\n                            <div class=\"email\">\r\n                              <label for=\"email\">Email:</label>\r\n                              <input type=\"email\" id=\"email\" value=\"${info.email}\" readonly/>\r\n                            </div>\r\n\r\n                            <div class=\"first-name\">\r\n                              <label for=\"first_name\">Prénom:</label>\r\n                              <input type=\"text\" id=\"first_name\" value=\"${info.first_name}\" readonly/>\r\n                            </div>\r\n\r\n                            <div class=\"gender\">\r\n                              <label for=\"gender\">Genre:</label>\r\n                              <input type=\"text\" id=\"gender\" value=\"${info.gender}\" readonly/>\r\n                            </div>\r\n\r\n\r\n                            <div class=\"last-name\">\r\n                              <label for=\"last_name\">Nom:</label>\r\n                              <input type=\"text\" id=\"last_name\" value=\"${info.last_name}\" readonly/>\r\n                            </div>\r\n\r\n                            <div class=\"role\">\r\n                              <label for=\"role\">Rôle:</label>\r\n                              <input type=\"text\" id=\"role\" value=\"${info.role}\" readonly disabled/>\r\n                            </div>\r\n\r\n                            <div class=\"grade\">\r\n                              <label for=\"grade\">Grade:</label>\r\n                              <input type=\"text\" id=\"grade\" value=\"${info.grade}\" readonly disabled/>\r\n                            </div>\r\n\r\n                            <div class=\"abonnement\">\r\n                              <label for=\"role\">abonnement:</label>\r\n                              <input type=\"text\" id=\"abonnement\" value=\"${info.abonnement}\" readonly disabled/>\r\n                            </div>\r\n\r\n                            \r\n                            <!-- Bouton pour activer la modification -->\r\n                             <button id=\"edit-button\" @click=\"${()=>compte.enableEditing(compte)}\">Modifier</button>\r\n\r\n                            <!-- Bouton pour enregistrer les modifications -->\r\n                            <button id=\"save-button\" style=\"display:none\" @click=\"${()=>compte.saveChanges()}\">Enregistrer</button>\r\n                          </div>\r\n                          `;\n                }}`)}`;\n            })}\r\n            </div>\r\n          </pf-panel>\r\n        <pf-avatar></pf-avatar>\r\n      </pf-page>`;\n        }}`,\n        styles: [\n            (0, $5D1XK.css)`\r\n      .table-infos {\r\n        color: black;\r\n      }\r\n      .navigation{\r\n        color: black\r\n      }\r\n      .title{\r\n        color: black;\r\n      }\r\n       /* Conteneur du dropdown */\r\n.dropdown {\r\n  position: relative;\r\n  display: inline-block;\r\n  width: 100%;\r\n}\r\n\r\n/* Bouton du dropdown */\r\n.dropdown-toggle {\r\n      background-color: #fafbfe;\r\n  color: #a2adcd;\r\n  padding: 10px 20px;\r\n  font-size: 16px;\r\n  border: none;\r\n  cursor: pointer;\r\n  border-radius: 4px;\r\n  width: 100%;\r\n}\r\n\r\n/* Liste cachée par défaut */\r\n.dropdown-menu {\r\n  display: none;\r\n  position: absolute;\r\n  background-color: #f9f9f9;\r\n  min-width: 160px;\r\n  box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);\r\n  z-index: 1;\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n  width: 100%;\r\n}\r\n\r\n/* Eléments du dropdown */\r\n.dropdown-item {\r\n  padding: 12px 16px;\r\n  text-align: left;\r\n  color: black;\r\n  text-decoration: none;\r\n  display: block;\r\n  font-size: 14px;\r\n}\r\n\r\n/* Changer la couleur au survol */\r\n.dropdown-item:hover {\r\n  background-color: #f1f1f1;\r\n  cursor: pointer;\r\n}\r\n\r\n/* Affichage du menu lorsque l'utilisateur clique sur le bouton */\r\n.dropdown:hover .dropdown-menu {\r\n  display: block;\r\n}\r\n\r\n#dropdownMenu {\r\n  display: none;\r\n  /* Autres styles pour le menu */\r\n}\r\n\r\n#dropdownMenu.visible {\r\n  display: block;\r\n  /* Autres styles pour le menu visible, comme une animation */\r\n}\r\n\r\n    `\n        ]\n    })\n], $d6167d91fef9b220$export$f12240e0b836973a);\nlet $d6167d91fef9b220$var$template = (0, $5D1XK.html)`${(context)=>{\n    return (0, $5D1XK.html)`<page-compte></page-compte>`;\n}}`;\n(0, $5D1XK.render)($d6167d91fef9b220$var$template);\n\n\n//# sourceMappingURL=index.112619ff.js.map\n","import { html , render , WebComponent , customElement , attr , attrState , state, css, ViewTemplate, ViewContext, asyncAppend, repeat, children } from '@lithium-framework/core';\r\nimport '@lithium-framework/router-element';\r\nimport 'unofficial-pf-v5-wc';\r\nimport 'unofficial-pf-v5-wc-icons';\r\nimport '../../components';\r\nimport { response } from 'express';\r\nimport {url} from '../../../../url';\r\n\r\n@customElement({\r\n  name: 'page-compte',\r\n  template: html`${(compte: Compte) => {\r\n    return html`\r\n      <pf-page masterhead-no-icon masterhead-no-branding drawer-inline drawer-expanded drawer-static drawer-panel-left>\r\n          <div slot = \"drawer-panel\">\r\n            <navigation-panel></navigation-panel>\r\n          </div>\r\n          <pf-panel header scrollable>\r\n            <div slot=\"header\">\r\n              <h1 class=\"title\">Compte</h1>\r\n            </div>\r\n            <div class=\"table-infos\">\r\n              ${asyncAppend(compte.preloadData(`${url}informations/`), (result) => {\r\n                  return html`${\r\n                    repeat(\r\n                      result,\r\n                      html`${(info) => {\r\n                        console.log(info)\r\n                        return html`\r\n                          <div class=\"row\">\r\n                            <div class=\"date-of-birth\">\r\n                              <label for=\"date_of_birth\">Date de naissance:</label>\r\n                              <input type=\"text\" id=\"date_of_birth\" value=\"${compte.formatDateFromISO(info.date_of_birth)}\" readonly disabled/>\r\n                            </div>\r\n\r\n                            <div class=\"email\">\r\n                              <label for=\"email\">Email:</label>\r\n                              <input type=\"email\" id=\"email\" value=\"${info.email}\" readonly/>\r\n                            </div>\r\n\r\n                            <div class=\"first-name\">\r\n                              <label for=\"first_name\">Prénom:</label>\r\n                              <input type=\"text\" id=\"first_name\" value=\"${info.first_name}\" readonly/>\r\n                            </div>\r\n\r\n                            <div class=\"gender\">\r\n                              <label for=\"gender\">Genre:</label>\r\n                              <input type=\"text\" id=\"gender\" value=\"${info.gender}\" readonly/>\r\n                            </div>\r\n\r\n\r\n                            <div class=\"last-name\">\r\n                              <label for=\"last_name\">Nom:</label>\r\n                              <input type=\"text\" id=\"last_name\" value=\"${info.last_name}\" readonly/>\r\n                            </div>\r\n\r\n                            <div class=\"role\">\r\n                              <label for=\"role\">Rôle:</label>\r\n                              <input type=\"text\" id=\"role\" value=\"${info.role}\" readonly disabled/>\r\n                            </div>\r\n\r\n                            <div class=\"grade\">\r\n                              <label for=\"grade\">Grade:</label>\r\n                              <input type=\"text\" id=\"grade\" value=\"${info.grade}\" readonly disabled/>\r\n                            </div>\r\n\r\n                            <div class=\"abonnement\">\r\n                              <label for=\"role\">abonnement:</label>\r\n                              <input type=\"text\" id=\"abonnement\" value=\"${info.abonnement}\" readonly disabled/>\r\n                            </div>\r\n\r\n                            \r\n                            <!-- Bouton pour activer la modification -->\r\n                             <button id=\"edit-button\" @click=\"${() => compte.enableEditing(compte)}\">Modifier</button>\r\n\r\n                            <!-- Bouton pour enregistrer les modifications -->\r\n                            <button id=\"save-button\" style=\"display:none\" @click=\"${() => compte.saveChanges()}\">Enregistrer</button>\r\n                          </div>\r\n                          `;\r\n                      }}`\r\n                    )\r\n                  }`\r\n                })\r\n              }\r\n            </div>\r\n          </pf-panel>\r\n        <pf-avatar></pf-avatar>\r\n      </pf-page>`;\r\n  }}`,\r\n  styles : [\r\n    css`\r\n      .table-infos {\r\n        color: black;\r\n      }\r\n      .navigation{\r\n        color: black\r\n      }\r\n      .title{\r\n        color: black;\r\n      }\r\n       /* Conteneur du dropdown */\r\n.dropdown {\r\n  position: relative;\r\n  display: inline-block;\r\n  width: 100%;\r\n}\r\n\r\n/* Bouton du dropdown */\r\n.dropdown-toggle {\r\n      background-color: #fafbfe;\r\n  color: #a2adcd;\r\n  padding: 10px 20px;\r\n  font-size: 16px;\r\n  border: none;\r\n  cursor: pointer;\r\n  border-radius: 4px;\r\n  width: 100%;\r\n}\r\n\r\n/* Liste cachée par défaut */\r\n.dropdown-menu {\r\n  display: none;\r\n  position: absolute;\r\n  background-color: #f9f9f9;\r\n  min-width: 160px;\r\n  box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);\r\n  z-index: 1;\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n  width: 100%;\r\n}\r\n\r\n/* Eléments du dropdown */\r\n.dropdown-item {\r\n  padding: 12px 16px;\r\n  text-align: left;\r\n  color: black;\r\n  text-decoration: none;\r\n  display: block;\r\n  font-size: 14px;\r\n}\r\n\r\n/* Changer la couleur au survol */\r\n.dropdown-item:hover {\r\n  background-color: #f1f1f1;\r\n  cursor: pointer;\r\n}\r\n\r\n/* Affichage du menu lorsque l'utilisateur clique sur le bouton */\r\n.dropdown:hover .dropdown-menu {\r\n  display: block;\r\n}\r\n\r\n#dropdownMenu {\r\n  display: none;\r\n  /* Autres styles pour le menu */\r\n}\r\n\r\n#dropdownMenu.visible {\r\n  display: block;\r\n  /* Autres styles pour le menu visible, comme une animation */\r\n}\r\n\r\n    `\r\n  ]\r\n})\r\n\r\nexport class Compte extends WebComponent {\r\n  data: any[] = [];\r\n\r\n  nom: string = '';\r\n  prenom: string = '';\r\n  mail: string = '';\r\n\r\n  @state() isAdmin: boolean = null;\r\n\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n    this.getRole();\r\n  }\r\n\r\n  checkUserConnection() {\r\n    const userDataString = localStorage.getItem('userData');\r\n    if (!userDataString) {\r\n        // Si l'utilisateur n'est pas connecté, redirige vers la page de connexion\r\n        window.location.href = '/pages/connexion';\r\n        return false; // Retourne false pour indiquer qu'aucun utilisateur n'est connecté\r\n    }\r\n    return true; // Si l'utilisateur est connecté, retourne true\r\n  }\r\n\r\n  // Méthode pour récupérer le rôle et affecter isAdmin\r\n  getRole() {\r\n    // Vérifie d'abord si l'utilisateur est connecté\r\n    if (!this.checkUserConnection()) {\r\n        return; // Si l'utilisateur n'est pas connecté, on arrête l'exécution\r\n    }\r\n\r\n    const userDataString = localStorage.getItem('userData');\r\n    const userData = JSON.parse(userDataString);\r\n    console.log('Données utilisateur récupérées:', userData);\r\n\r\n    // Récupère le rôle de l'utilisateur\r\n    const userRole = userData.role;\r\n    console.log('Rôle de l\\'utilisateur:', userRole);\r\n\r\n    // Vérifie si l'utilisateur a un rôle administrateur et met à jour isAdmin\r\n    if (userRole === 'administrator' || userRole === 'super-administrator') {\r\n        this.isAdmin = true;\r\n    } else {\r\n        this.isAdmin = false;\r\n    }\r\n\r\n    console.log('Est-ce un administrateur ? ', this.isAdmin);\r\n  }\r\n\r\n\r\n  async preloadData(url): Promise<any[]> {\r\n    try {\r\n      const userDataString = localStorage.getItem('userData');\r\n      if (!userDataString) {\r\n        throw new Error('Utilisateur non connecté. Aucune donnée dans localStorage.');\r\n      }\r\n  \r\n      const userData = JSON.parse(userDataString);\r\n      console.log('Données utilisateur récupérées:', userData);\r\n  \r\n      const response = await fetch(`http://ec2-18-185-136-232.eu-central-1.compute.amazonaws.com:3000/informations`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(userData),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error('Erreur serveur.');\r\n      }\r\n  \r\n      const data = await response.json();\r\n  \r\n      // Enveloppe l'objet dans un tableau\r\n      const dataArray = [data]; // Si `data` est un objet, on le met directement dans un tableau\r\n  \r\n      console.log('Données mises dans un tableau:', dataArray, dataArray.length);\r\n  \r\n      return dataArray.length > 0 ? dataArray : []; // Retourne le tableau, ou un tableau vide si aucun élément\r\n    } catch (error) {\r\n      console.error('Erreur lors de la requête fetch:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n\r\n  async preloadDataDropDown(url): Promise<any[]> {\r\n    try {\r\n  \r\n      const response = await fetch(url, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error('Erreur serveur.');\r\n      }\r\n  \r\n      const data = await response.json();\r\n  \r\n      console.log(data, data.length);\r\n  \r\n      return data.length > 0 ? data : []; // Retourne le tableau, ou un tableau vide si aucun élément\r\n    } catch (error) {\r\n      console.error('Erreur lors de la requête fetch:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  enableEditing(compte) {\r\n    console.log(\"Enable editing\");\r\n\r\n    // Rendre les champs éditables dans le Shadow DOM\r\n    this.shadowRoot.getElementById('first_name').removeAttribute('readonly');\r\n    this.shadowRoot.getElementById('last_name').removeAttribute('readonly');\r\n    this.shadowRoot.getElementById('email').removeAttribute('readonly');\r\n    \r\n    // Modifier l'affichage des boutons\r\n    this.shadowRoot.getElementById('edit-button').style.display = 'none';\r\n    this.shadowRoot.getElementById('save-button').style.display = 'inline-block';\r\n\r\n    // Retourner un message pour informer l'utilisateur qu'il peut éditer\r\n    return html`<div>Vous pouvez modifier désormais</div>`;\r\n}\r\n\r\nvalidateForm() {\r\n    // Récupérer les valeurs des champs dans le Shadow DOM\r\n    let email = this.shadowRoot?.getElementById('email').value;\r\n    let firstName = this.shadowRoot?.getElementById('first_name').value;\r\n    let lastName = this.shadowRoot?.getElementById('last_name').value;\r\n\r\n    // Expression régulière pour valider un email\r\n    let regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\r\n    // Vérifier si l'email est valide\r\n    if (!regex.test(email)) {\r\n        alert('Veuillez entrer un email valide');\r\n        return false;\r\n    }\r\n\r\n    // Vérifier si les champs nécessaires ne sont pas vides\r\n    if (!firstName || !lastName) {\r\n        alert('Tous les champs doivent être remplis');\r\n        return false;\r\n    }\r\n\r\n    // Si toutes les conditions sont validées, permettre l'enregistrement\r\n    return true;\r\n}\r\n\r\nasync saveChanges() {\r\n  // Valider les données avant d'enregistrer\r\n  if (this.validateForm()) {\r\n    // Récupérer les nouvelles valeurs\r\n    let email = this.shadowRoot?.getElementById('email').value;\r\n    let firstName = this.shadowRoot?.getElementById('first_name').value;\r\n    let lastName = this.shadowRoot?.getElementById('last_name').value;\r\n\r\n    // Récupérer les données actuelles depuis le localStorage\r\n    let currentUserData = localStorage.getItem(\"userData\");\r\n    let current = currentUserData ? JSON.parse(currentUserData) : {};\r\n\r\n    // Préparer les nouvelles données à envoyer\r\n    let data = {\r\n      new_email: email,\r\n      new_first_name: firstName,\r\n      new_last_name: lastName,\r\n      current_mail: current.email,             // Utiliser les données actuelles\r\n      current_first_name: current.prenom,      // Utiliser les données actuelles\r\n      current_last_name: current.nom           // Utiliser les données actuelles\r\n    };\r\n\r\n    // Envoie les données à l'API via fetch\r\n    fetch(`${url}users/update/`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(data)\r\n    })\r\n    .then(response => response.json())\r\n    .then(result => {\r\n      if (result.success) {\r\n        // Si l'enregistrement a réussi\r\n        alert('Modifications enregistrées avec succès');\r\n\r\n        // Mettre à jour le localStorage avec les nouvelles informations utilisateur\r\n        localStorage.setItem('userData', JSON.stringify(result.data));\r\n      } else {\r\n        // Si l'enregistrement échoue\r\n        alert('Erreur lors de l\\'enregistrement');\r\n      }\r\n    })\r\n    .catch(error => {\r\n      // Si une erreur se produit lors de l'appel à l'API\r\n      console.error('Erreur:', error);\r\n      alert('Une erreur s\\'est produite lors de la tentative d\\'enregistrement');\r\n    });\r\n\r\n    // Revenir aux états non modifiables après l'enregistrement\r\n    this.shadowRoot.getElementById('first_name').setAttribute('readonly', 'true');\r\n    this.shadowRoot.getElementById('last_name').setAttribute('readonly', 'true');\r\n    this.shadowRoot.getElementById('email').setAttribute('readonly', 'true');\r\n\r\n    // Masquer le bouton d'enregistrement et revenir au bouton \"Modifier\"\r\n    this.shadowRoot.getElementById('save-button').style.display = 'none';\r\n    this.shadowRoot.getElementById('edit-button').style.display = 'inline-block';\r\n  }\r\n}\r\n\r\n\r\n  \r\n\r\n  formatDateFromISO(isoDateString: string): string {\r\n    const date = new Date(isoDateString);\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    return `${year}-${month}-${day}`;\r\n  }\r\n\r\n  convertToISODate(dateString: string): string {\r\n    const [year, month, day] = dateString.split('-');\r\n    return new Date(`${year}-${month}-${day}T00:00:00Z`).toISOString();\r\n  }\r\n  \r\n}\r\n\r\n\r\n\r\nlet template: ViewTemplate<any> = html`${( context:ViewContext )=>{\r\n\r\n\r\n  return html`<page-compte></page-compte>`;\r\n\r\n}}`\r\n\r\n\r\n\r\n\r\nrender(template);"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$7WQrb","$5D1XK","$keLaC","$d6167d91fef9b220$export$f12240e0b836973a","WebComponent","connectedCallback","getRole","checkUserConnection","localStorage","getItem","window","location","href","userData","JSON","parse","console","log","userRole","role","isAdmin","preloadData","url","userDataString","response","fetch","method","headers","body","stringify","ok","dataArray","json","length","error","preloadDataDropDown","data","enableEditing","compte","shadowRoot","getElementById","removeAttribute","style","display","html","validateForm","email","value","firstName","lastName","regex","test","alert","saveChanges","currentUserData","current","new_email","new_first_name","new_last_name","current_mail","current_first_name","prenom","current_last_name","nom","then","result","success","setItem","catch","setAttribute","formatDateFromISO","isoDateString","date","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","convertToISODate","dateString","split","toISOString","constructor","args","mail","__decorate","state","prototype","customElement","name","template","asyncAppend","repeat","info","date_of_birth","first_name","gender","last_name","grade","abonnement","styles","css","$d6167d91fef9b220$var$template","context","render"],"version":3,"file":"index.112619ff.js.map"}