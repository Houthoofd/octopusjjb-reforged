{"mappings":"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","sources":["<anon>","ui/src/pages/profile/index.ts"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequirec605\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequirec605\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $7WQrb = parcelRequire(\"7WQrb\");\n\nvar $5D1XK = parcelRequire(\"5D1XK\");\nparcelRequire(\"RKbfs\");\nparcelRequire(\"3I5Zu\");\nparcelRequire(\"dLLJA\");\nparcelRequire(\"7KTRf\");\n\nvar $keLaC = parcelRequire(\"keLaC\");\nclass $924983a12fafd18f$export$5120f2d0b8d4cab8 extends (0, $5D1XK.WebComponent) {\n    connectedCallback() {\n        super.connectedCallback();\n        this.getRole();\n    }\n    checkUserConnection() {\n        const userDataString = localStorage.getItem(\"userData\");\n        if (!userDataString) {\n            // Si l'utilisateur n'est pas connecté, redirige vers la page de connexion\n            window.location.href = \"/pages/connexion\";\n            return false; // Retourne false pour indiquer qu'aucun utilisateur n'est connecté\n        }\n        return true; // Si l'utilisateur est connecté, retourne true\n    }\n    // Méthode pour récupérer le rôle et affecter isAdmin\n    getRole() {\n        // Vérifie d'abord si l'utilisateur est connecté\n        if (!this.checkUserConnection()) return; // Si l'utilisateur n'est pas connecté, on arrête l'exécution\n        const userDataString = localStorage.getItem(\"userData\");\n        const userData = JSON.parse(userDataString);\n        console.log(\"Donn\\xe9es utilisateur r\\xe9cup\\xe9r\\xe9es:\", userData);\n        // Récupère le rôle de l'utilisateur\n        const userRole = userData.role;\n        console.log(\"R\\xf4le de l'utilisateur:\", userRole);\n        // Vérifie si l'utilisateur a un rôle administrateur et met à jour isAdmin\n        if (userRole === \"administrator\" || userRole === \"super-administrator\") this.isAdmin = true;\n        else this.isAdmin = false;\n        console.log(\"Est-ce un administrateur ? \", this.isAdmin);\n    }\n    // Fonction pour récupérer les paramètres depuis l'URL\n    getQueryParams() {\n        const params = new URLSearchParams(window.location.search);\n        return {\n            email: params.get(\"email\"),\n            prenom: params.get(\"prenom\"),\n            nom: params.get(\"nom\")\n        };\n    }\n    // Méthode pour précharger les données de l'utilisateur\n    async preloadData() {\n        try {\n            const queryParams = this.getQueryParams();\n            // Vérifier si les paramètres sont présents dans l'URL\n            if (!queryParams.email || !queryParams.prenom || !queryParams.nom) {\n                // Si les paramètres sont manquants, essayer de les récupérer depuis localStorage\n                const userDataString = localStorage.getItem(\"userData\");\n                if (!userDataString) throw new Error(\"Utilisateur non connect\\xe9. Aucune donn\\xe9e dans localStorage.\");\n                const userData = JSON.parse(userDataString);\n                console.log(\"Donn\\xe9es utilisateur r\\xe9cup\\xe9r\\xe9es depuis localStorage:\", userData);\n                // Récupérer les données via un fetch pour l'utilisateur connecté\n                const response = await fetch(`${(0, $keLaC.url)}profile`, {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(userData)\n                });\n                if (!response.ok) throw new Error(\"Erreur serveur.\");\n                const data = await response.json();\n                return data.totalCourses.length > 0 ? data : []; // Retourne le tableau, ou un tableau vide si aucun élément\n            } else {\n                // Si les paramètres sont présents dans l'URL, les utiliser pour faire un fetch\n                console.log(\"Donn\\xe9es re\\xe7ues depuis l'URL:\", queryParams);\n                const response = await fetch(`${(0, $keLaC.url)}profile?email=${queryParams.email}&prenom=${queryParams.prenom}&nom=${queryParams.nom}`, {\n                    method: \"GET\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                });\n                if (!response.ok) throw new Error(\"Erreur serveur.\");\n                const data = await response.json();\n                return data.totalCourses.length > 0 ? data : []; // Retourne le tableau, ou un tableau vide si aucun élément\n            }\n        } catch (error) {\n            console.error(\"Erreur lors de la requ\\xeate fetch:\", error);\n            return [];\n        }\n    }\n    calculatePresenceRate(presences, totalCours) {\n        const totalParticipants = presences.length;\n        const participantsPresent = presences.filter((p)=>p.status === 1).length;\n        console.log(totalParticipants, participantsPresent, totalCours);\n        // Si aucun cours ou participant, on retourne 0%\n        if (totalCours === 0 || totalParticipants === 0) return \"0%\";\n        // Calculer le taux de présences par rapport au nombre total de cours\n        const presenceRate = participantsPresent / totalCours * 100;\n        console.log(presenceRate, participantsPresent, totalCours);\n        return `${presenceRate.toFixed(2)}%`;\n    }\n    formatDateFromISO(isoDateString) {\n        const date = new Date(isoDateString);\n        const year = date.getFullYear();\n        const month = String(date.getMonth() + 1).padStart(2, \"0\");\n        const day = String(date.getDate()).padStart(2, \"0\");\n        return `${year}-${month}-${day}`;\n    }\n    convertToISODate(dateString) {\n        const [year, month, day] = dateString.split(\"-\");\n        return new Date(`${year}-${month}-${day}T00:00:00Z`).toISOString();\n    }\n    constructor(...args){\n        super(...args);\n        this.data = [];\n        this.isAdmin = null;\n    }\n}\n(0, $7WQrb.__decorate)([\n    (0, $5D1XK.state)()\n], $924983a12fafd18f$export$5120f2d0b8d4cab8.prototype, \"isAdmin\", void 0);\n$924983a12fafd18f$export$5120f2d0b8d4cab8 = (0, $7WQrb.__decorate)([\n    (0, $5D1XK.customElement)({\n        name: \"page-profile\",\n        template: (0, $5D1XK.html)`${(profile)=>{\n            return (0, $5D1XK.html)`\r\n      <pf-page masterhead-no-icon masterhead-no-branding drawer-inline drawer-expanded drawer-static drawer-panel-left>\r\n          <div slot = \"drawer-panel\">\r\n            <navigation-panel></navigation-panel>\r\n          </div>\r\n          <pf-panel header scrollable>\r\n            <div slot=\"header\">\r\n              <h1 class=\"title\">Profile</h1>\r\n            </div>\r\n            <div class=\"table-infos\">\r\n              ${(0, $5D1XK.asyncAppend)(profile.preloadData(), (result)=>{\n                console.log(result);\n                return (0, $5D1XK.html)`\r\n                    <div class=\"row header\">\r\n                      <div class=\"col\">Mois</div>\r\n                      <div class=\"col\">Total de cours</div>\r\n                      <div class=\"col\">Taux de présences</div>\r\n                    </div>\r\n                    ${(0, $5D1XK.repeat)(result.totalCourses, (0, $5D1XK.html)`${(info)=>{\n                    console.log(info.month, info.total_courses, info.presences, profile.calculatePresenceRate(info.presences, info.total_courses));\n                    return (0, $5D1XK.html)`\r\n                          <div class=\"row\">\r\n                            <div class=\"col\">${info.month}</div>\r\n                            <div class=\"col\">${info.total_courses}</div>\r\n                            <div class=\"col\">${profile.calculatePresenceRate(info.presences, info.total_courses)}</div>\r\n                          </div>`;\n                }}`)}`;\n            })}\r\n            </div>\r\n          </pf-panel>\r\n        <pf-avatar></pf-avatar>\r\n      </pf-page>`;\n        }}`,\n        styles: [\n            (0, $5D1XK.css)`\r\n      .title{\r\n        color: black;\r\n      }\r\n      .table-infos {\r\n        color: black;\r\n      }\r\n      .navigation{\r\n        color: black\r\n      }\r\n      .table-infos .row {\r\n  display: flex;\r\n  padding: 10px 0;\r\n}\r\n\r\n.table-infos .row.header {\r\n  font-weight: bold;\r\n  background-color: #f4f4f4;\r\n}\r\n\r\n.table-infos .col {\r\n  flex: 1;\r\n  padding: 5px;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\n.table-infos .row:hover {\r\n  background-color: #f9f9f9;\r\n}\r\n    `\n        ]\n    })\n], $924983a12fafd18f$export$5120f2d0b8d4cab8);\nlet $924983a12fafd18f$var$template = (0, $5D1XK.html)`${(context)=>{\n    return (0, $5D1XK.html)`<page-profile></page-profile>`;\n}}`;\n(0, $5D1XK.render)($924983a12fafd18f$var$template);\n\n\n//# sourceMappingURL=index.caae8e44.js.map\n","import { html , render , WebComponent , customElement , attr , attrState , state, css, ViewTemplate, ViewContext, asyncAppend, repeat, children } from '@lithium-framework/core';\r\nimport '@lithium-framework/router-element';\r\nimport 'unofficial-pf-v5-wc';\r\nimport 'unofficial-pf-v5-wc-icons';\r\nimport '../../components';\r\nimport {url} from '../../../../url';\r\n\r\n\r\n@customElement({\r\n  name: 'page-profile',\r\n  template: html`${(profile: Profile) => {\r\n    return html`\r\n      <pf-page masterhead-no-icon masterhead-no-branding drawer-inline drawer-expanded drawer-static drawer-panel-left>\r\n          <div slot = \"drawer-panel\">\r\n            <navigation-panel></navigation-panel>\r\n          </div>\r\n          <pf-panel header scrollable>\r\n            <div slot=\"header\">\r\n              <h1 class=\"title\">Profile</h1>\r\n            </div>\r\n            <div class=\"table-infos\">\r\n              ${asyncAppend(profile.preloadData(), (result) => {\r\n                  console.log(result)\r\n                  return html`\r\n                    <div class=\"row header\">\r\n                      <div class=\"col\">Mois</div>\r\n                      <div class=\"col\">Total de cours</div>\r\n                      <div class=\"col\">Taux de présences</div>\r\n                    </div>\r\n                    ${\r\n                    repeat(\r\n                      result.totalCourses,\r\n                      html`${(info) => {\r\n                        console.log(info.month,info.total_courses, info.presences, profile.calculatePresenceRate(info.presences,info.total_courses))\r\n                        return html`\r\n                          <div class=\"row\">\r\n                            <div class=\"col\">${info.month}</div>\r\n                            <div class=\"col\">${info.total_courses}</div>\r\n                            <div class=\"col\">${profile.calculatePresenceRate(info.presences, info.total_courses)}</div>\r\n                          </div>`;\r\n                      }}`\r\n                    )\r\n                  }`\r\n                })\r\n              }\r\n            </div>\r\n          </pf-panel>\r\n        <pf-avatar></pf-avatar>\r\n      </pf-page>`;\r\n  }}`,\r\n  styles : [\r\n    css`\r\n      .title{\r\n        color: black;\r\n      }\r\n      .table-infos {\r\n        color: black;\r\n      }\r\n      .navigation{\r\n        color: black\r\n      }\r\n      .table-infos .row {\r\n  display: flex;\r\n  padding: 10px 0;\r\n}\r\n\r\n.table-infos .row.header {\r\n  font-weight: bold;\r\n  background-color: #f4f4f4;\r\n}\r\n\r\n.table-infos .col {\r\n  flex: 1;\r\n  padding: 5px;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\n.table-infos .row:hover {\r\n  background-color: #f9f9f9;\r\n}\r\n    `\r\n  ]\r\n})\r\n\r\nexport class Profile extends WebComponent {\r\n  data: any[] = [];\r\n\r\n  @state() isAdmin: boolean = null;\r\n\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n    this.getRole();\r\n  }\r\n\r\n  checkUserConnection() {\r\n    const userDataString = localStorage.getItem('userData');\r\n    if (!userDataString) {\r\n        // Si l'utilisateur n'est pas connecté, redirige vers la page de connexion\r\n        window.location.href = '/pages/connexion';\r\n        return false; // Retourne false pour indiquer qu'aucun utilisateur n'est connecté\r\n    }\r\n    return true; // Si l'utilisateur est connecté, retourne true\r\n  }\r\n\r\n  // Méthode pour récupérer le rôle et affecter isAdmin\r\n  getRole() {\r\n    // Vérifie d'abord si l'utilisateur est connecté\r\n    if (!this.checkUserConnection()) {\r\n        return; // Si l'utilisateur n'est pas connecté, on arrête l'exécution\r\n    }\r\n\r\n    const userDataString = localStorage.getItem('userData');\r\n    const userData = JSON.parse(userDataString);\r\n    console.log('Données utilisateur récupérées:', userData);\r\n\r\n    // Récupère le rôle de l'utilisateur\r\n    const userRole = userData.role;\r\n    console.log('Rôle de l\\'utilisateur:', userRole);\r\n\r\n    // Vérifie si l'utilisateur a un rôle administrateur et met à jour isAdmin\r\n    if (userRole === 'administrator' || userRole === 'super-administrator') {\r\n        this.isAdmin = true;\r\n    } else {\r\n        this.isAdmin = false;\r\n    }\r\n\r\n    console.log('Est-ce un administrateur ? ', this.isAdmin);\r\n  }\r\n\r\n  // Fonction pour récupérer les paramètres depuis l'URL\r\n  getQueryParams() {\r\n    const params = new URLSearchParams(window.location.search);\r\n    return {\r\n      email: params.get('email'),\r\n      prenom: params.get('prenom'),\r\n      nom: params.get('nom'),\r\n    };\r\n  }\r\n\r\n  // Méthode pour précharger les données de l'utilisateur\r\n  async preloadData(): Promise<any[]> {\r\n    try {\r\n      const queryParams = this.getQueryParams();\r\n\r\n      // Vérifier si les paramètres sont présents dans l'URL\r\n      if (!queryParams.email || !queryParams.prenom || !queryParams.nom) {\r\n        // Si les paramètres sont manquants, essayer de les récupérer depuis localStorage\r\n        const userDataString = localStorage.getItem('userData');\r\n        if (!userDataString) {\r\n          throw new Error('Utilisateur non connecté. Aucune donnée dans localStorage.');\r\n        }\r\n        const userData = JSON.parse(userDataString);\r\n        console.log('Données utilisateur récupérées depuis localStorage:', userData);\r\n\r\n        // Récupérer les données via un fetch pour l'utilisateur connecté\r\n        const response = await fetch(`${url}profile`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(userData),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Erreur serveur.');\r\n        }\r\n\r\n        const data = await response.json();\r\n        return data.totalCourses.length > 0 ? data : []; // Retourne le tableau, ou un tableau vide si aucun élément\r\n      } else {\r\n        // Si les paramètres sont présents dans l'URL, les utiliser pour faire un fetch\r\n        console.log(\"Données reçues depuis l'URL:\", queryParams);\r\n\r\n        const response = await fetch(`${url}profile?email=${queryParams.email}&prenom=${queryParams.prenom}&nom=${queryParams.nom}`, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        });\r\n        \r\n        \r\n        if (!response.ok) {\r\n          throw new Error('Erreur serveur.');\r\n        }\r\n\r\n        const data = await response.json();\r\n        return data.totalCourses.length > 0 ? data : []; // Retourne le tableau, ou un tableau vide si aucun élément\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors de la requête fetch:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  calculatePresenceRate(presences, totalCours) {\r\n    const totalParticipants = presences.length;\r\n    const participantsPresent = presences.filter(p => p.status === 1).length;\r\n\r\n    console.log(totalParticipants, participantsPresent, totalCours);\r\n    // Si aucun cours ou participant, on retourne 0%\r\n    if (totalCours === 0 || totalParticipants === 0) {\r\n      return '0%';\r\n    }\r\n\r\n    // Calculer le taux de présences par rapport au nombre total de cours\r\n    const presenceRate = (participantsPresent / (totalCours)) * 100;\r\n    console.log(presenceRate, participantsPresent, totalCours)\r\n    return `${presenceRate.toFixed(2)}%`;\r\n  }\r\n\r\n  formatDateFromISO(isoDateString: string): string {\r\n    const date = new Date(isoDateString);\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    return `${year}-${month}-${day}`;\r\n  }\r\n\r\n  convertToISODate(dateString: string): string {\r\n    const [year, month, day] = dateString.split('-');\r\n    return new Date(`${year}-${month}-${day}T00:00:00Z`).toISOString();\r\n  }\r\n}\r\n\r\n\r\n\r\nlet template: ViewTemplate<any> = html`${( context:ViewContext )=>{\r\n\r\n\r\n  return html`<page-profile></page-profile>`;\r\n\r\n}}`\r\n\r\n\r\nrender(template);"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$7WQrb","$5D1XK","$keLaC","$924983a12fafd18f$export$5120f2d0b8d4cab8","WebComponent","connectedCallback","getRole","checkUserConnection","localStorage","getItem","window","location","href","userData","JSON","parse","console","log","userRole","role","isAdmin","getQueryParams","params","URLSearchParams","search","email","get","prenom","nom","preloadData","queryParams","response","fetch","url","method","headers","ok","data","json","totalCourses","length","userDataString","body","stringify","error","calculatePresenceRate","presences","totalCours","totalParticipants","participantsPresent","filter","p","status","presenceRate","toFixed","formatDateFromISO","isoDateString","date","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","convertToISODate","dateString","split","toISOString","constructor","args","__decorate","state","prototype","customElement","name","template","html","profile","asyncAppend","result","repeat","info","total_courses","styles","css","$924983a12fafd18f$var$template","context","render"],"version":3,"file":"index.caae8e44.js.map"}